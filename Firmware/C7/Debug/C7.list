
C7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003664  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003724  08003724  00004724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003790  08003790  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003790  08003790  00004790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003798  08003798  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003798  08003798  00004798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800379c  0800379c  0000479c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080037a0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000052c  2000000c  080037ac  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  080037ac  00005538  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ad3  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002583  00000000  00000000  00016b07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00019090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb8  00000000  00000000  00019f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000154cf  00000000  00000000  0001ab48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001369a  00000000  00000000  00030017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084545  00000000  00000000  000436b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7bf6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000366c  00000000  00000000  000c7c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000cb2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800370c 	.word	0x0800370c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800370c 	.word	0x0800370c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fc2e 	bl	8000d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f810 	bl	80004d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f9f0 	bl	8000898 <MX_GPIO_Init>
  MX_ADC_Init();
 80004b8:	f000 f87e 	bl	80005b8 <MX_ADC_Init>
  MX_I2C1_Init();
 80004bc:	f000 f8ee 	bl	800069c <MX_I2C1_Init>
  MX_SPI1_Init();
 80004c0:	f000 f92c 	bl	800071c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80004c4:	f000 f962 	bl	800078c <MX_USART1_UART_Init>
  MX_USART5_UART_Init();
 80004c8:	f000 f990 	bl	80007ec <MX_USART5_UART_Init>
  MX_USB_PCD_Init();
 80004cc:	f000 f9be 	bl	800084c <MX_USB_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d0:	46c0      	nop			@ (mov r8, r8)
 80004d2:	e7fd      	b.n	80004d0 <main+0x28>

080004d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b09f      	sub	sp, #124	@ 0x7c
 80004d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	2440      	movs	r4, #64	@ 0x40
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	0018      	movs	r0, r3
 80004e0:	2338      	movs	r3, #56	@ 0x38
 80004e2:	001a      	movs	r2, r3
 80004e4:	2100      	movs	r1, #0
 80004e6:	f003 f8e4 	bl	80036b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ea:	232c      	movs	r3, #44	@ 0x2c
 80004ec:	18fb      	adds	r3, r7, r3
 80004ee:	0018      	movs	r0, r3
 80004f0:	2314      	movs	r3, #20
 80004f2:	001a      	movs	r2, r3
 80004f4:	2100      	movs	r1, #0
 80004f6:	f003 f8dc 	bl	80036b2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	0018      	movs	r0, r3
 80004fe:	2328      	movs	r3, #40	@ 0x28
 8000500:	001a      	movs	r2, r3
 8000502:	2100      	movs	r1, #0
 8000504:	f003 f8d5 	bl	80036b2 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000508:	4b29      	ldr	r3, [pc, #164]	@ (80005b0 <SystemClock_Config+0xdc>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a29      	ldr	r2, [pc, #164]	@ (80005b4 <SystemClock_Config+0xe0>)
 800050e:	401a      	ands	r2, r3
 8000510:	4b27      	ldr	r3, [pc, #156]	@ (80005b0 <SystemClock_Config+0xdc>)
 8000512:	2180      	movs	r1, #128	@ 0x80
 8000514:	0109      	lsls	r1, r1, #4
 8000516:	430a      	orrs	r2, r1
 8000518:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800051a:	0021      	movs	r1, r4
 800051c:	187b      	adds	r3, r7, r1
 800051e:	2222      	movs	r2, #34	@ 0x22
 8000520:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2201      	movs	r2, #1
 8000526:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000528:	187b      	adds	r3, r7, r1
 800052a:	2210      	movs	r2, #16
 800052c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800052e:	187b      	adds	r3, r7, r1
 8000530:	2201      	movs	r2, #1
 8000532:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000534:	187b      	adds	r3, r7, r1
 8000536:	2200      	movs	r2, #0
 8000538:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053a:	187b      	adds	r3, r7, r1
 800053c:	0018      	movs	r0, r3
 800053e:	f001 fb31 	bl	8001ba4 <HAL_RCC_OscConfig>
 8000542:	1e03      	subs	r3, r0, #0
 8000544:	d001      	beq.n	800054a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000546:	f000 fa2b 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054a:	212c      	movs	r1, #44	@ 0x2c
 800054c:	187b      	adds	r3, r7, r1
 800054e:	220f      	movs	r2, #15
 8000550:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2201      	movs	r2, #1
 8000556:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2200      	movs	r2, #0
 8000568:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2100      	movs	r1, #0
 800056e:	0018      	movs	r0, r3
 8000570:	f001 feec 	bl	800234c <HAL_RCC_ClockConfig>
 8000574:	1e03      	subs	r3, r0, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000578:	f000 fa12 	bl	80009a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2249      	movs	r2, #73	@ 0x49
 8000580:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2200      	movs	r2, #0
 8000586:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2200      	movs	r2, #0
 800058c:	619a      	str	r2, [r3, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2280      	movs	r2, #128	@ 0x80
 8000592:	04d2      	lsls	r2, r2, #19
 8000594:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	0018      	movs	r0, r3
 800059a:	f002 f8fb 	bl	8002794 <HAL_RCCEx_PeriphCLKConfig>
 800059e:	1e03      	subs	r3, r0, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005a2:	f000 f9fd 	bl	80009a0 <Error_Handler>
  }
}
 80005a6:	46c0      	nop			@ (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	b01f      	add	sp, #124	@ 0x7c
 80005ac:	bd90      	pop	{r4, r7, pc}
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	40007000 	.word	0x40007000
 80005b4:	ffffe7ff 	.word	0xffffe7ff

080005b8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005be:	003b      	movs	r3, r7
 80005c0:	0018      	movs	r0, r3
 80005c2:	2308      	movs	r3, #8
 80005c4:	001a      	movs	r2, r3
 80005c6:	2100      	movs	r1, #0
 80005c8:	f003 f873 	bl	80036b2 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80005cc:	4b30      	ldr	r3, [pc, #192]	@ (8000690 <MX_ADC_Init+0xd8>)
 80005ce:	4a31      	ldr	r2, [pc, #196]	@ (8000694 <MX_ADC_Init+0xdc>)
 80005d0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80005d2:	4b2f      	ldr	r3, [pc, #188]	@ (8000690 <MX_ADC_Init+0xd8>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80005d8:	4b2d      	ldr	r3, [pc, #180]	@ (8000690 <MX_ADC_Init+0xd8>)
 80005da:	22c0      	movs	r2, #192	@ 0xc0
 80005dc:	0612      	lsls	r2, r2, #24
 80005de:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80005e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000690 <MX_ADC_Init+0xd8>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000690 <MX_ADC_Init+0xd8>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80005ec:	4b28      	ldr	r3, [pc, #160]	@ (8000690 <MX_ADC_Init+0xd8>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f2:	4b27      	ldr	r3, [pc, #156]	@ (8000690 <MX_ADC_Init+0xd8>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80005f8:	4b25      	ldr	r3, [pc, #148]	@ (8000690 <MX_ADC_Init+0xd8>)
 80005fa:	2220      	movs	r2, #32
 80005fc:	2100      	movs	r1, #0
 80005fe:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000600:	4b23      	ldr	r3, [pc, #140]	@ (8000690 <MX_ADC_Init+0xd8>)
 8000602:	2221      	movs	r2, #33	@ 0x21
 8000604:	2100      	movs	r1, #0
 8000606:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000608:	4b21      	ldr	r3, [pc, #132]	@ (8000690 <MX_ADC_Init+0xd8>)
 800060a:	2200      	movs	r2, #0
 800060c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800060e:	4b20      	ldr	r3, [pc, #128]	@ (8000690 <MX_ADC_Init+0xd8>)
 8000610:	22c2      	movs	r2, #194	@ 0xc2
 8000612:	32ff      	adds	r2, #255	@ 0xff
 8000614:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000616:	4b1e      	ldr	r3, [pc, #120]	@ (8000690 <MX_ADC_Init+0xd8>)
 8000618:	222c      	movs	r2, #44	@ 0x2c
 800061a:	2100      	movs	r1, #0
 800061c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800061e:	4b1c      	ldr	r3, [pc, #112]	@ (8000690 <MX_ADC_Init+0xd8>)
 8000620:	2204      	movs	r2, #4
 8000622:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000624:	4b1a      	ldr	r3, [pc, #104]	@ (8000690 <MX_ADC_Init+0xd8>)
 8000626:	2200      	movs	r2, #0
 8000628:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800062a:	4b19      	ldr	r3, [pc, #100]	@ (8000690 <MX_ADC_Init+0xd8>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000630:	4b17      	ldr	r3, [pc, #92]	@ (8000690 <MX_ADC_Init+0xd8>)
 8000632:	2200      	movs	r2, #0
 8000634:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000636:	4b16      	ldr	r3, [pc, #88]	@ (8000690 <MX_ADC_Init+0xd8>)
 8000638:	2200      	movs	r2, #0
 800063a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800063c:	4b14      	ldr	r3, [pc, #80]	@ (8000690 <MX_ADC_Init+0xd8>)
 800063e:	0018      	movs	r0, r3
 8000640:	f000 fbd4 	bl	8000dec <HAL_ADC_Init>
 8000644:	1e03      	subs	r3, r0, #0
 8000646:	d001      	beq.n	800064c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000648:	f000 f9aa 	bl	80009a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800064c:	003b      	movs	r3, r7
 800064e:	2201      	movs	r2, #1
 8000650:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000652:	003b      	movs	r3, r7
 8000654:	2280      	movs	r2, #128	@ 0x80
 8000656:	0152      	lsls	r2, r2, #5
 8000658:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800065a:	003a      	movs	r2, r7
 800065c:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <MX_ADC_Init+0xd8>)
 800065e:	0011      	movs	r1, r2
 8000660:	0018      	movs	r0, r3
 8000662:	f000 fd37 	bl	80010d4 <HAL_ADC_ConfigChannel>
 8000666:	1e03      	subs	r3, r0, #0
 8000668:	d001      	beq.n	800066e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800066a:	f000 f999 	bl	80009a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800066e:	003b      	movs	r3, r7
 8000670:	4a09      	ldr	r2, [pc, #36]	@ (8000698 <MX_ADC_Init+0xe0>)
 8000672:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000674:	003a      	movs	r2, r7
 8000676:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <MX_ADC_Init+0xd8>)
 8000678:	0011      	movs	r1, r2
 800067a:	0018      	movs	r0, r3
 800067c:	f000 fd2a 	bl	80010d4 <HAL_ADC_ConfigChannel>
 8000680:	1e03      	subs	r3, r0, #0
 8000682:	d001      	beq.n	8000688 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000684:	f000 f98c 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000688:	46c0      	nop			@ (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	b002      	add	sp, #8
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000028 	.word	0x20000028
 8000694:	40012400 	.word	0x40012400
 8000698:	04000002 	.word	0x04000002

0800069c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <MX_I2C1_Init+0x74>)
 80006a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000714 <MX_I2C1_Init+0x78>)
 80006a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000710 <MX_I2C1_Init+0x74>)
 80006a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000718 <MX_I2C1_Init+0x7c>)
 80006aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006ac:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <MX_I2C1_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b2:	4b17      	ldr	r3, [pc, #92]	@ (8000710 <MX_I2C1_Init+0x74>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b8:	4b15      	ldr	r3, [pc, #84]	@ (8000710 <MX_I2C1_Init+0x74>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006be:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <MX_I2C1_Init+0x74>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <MX_I2C1_Init+0x74>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <MX_I2C1_Init+0x74>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <MX_I2C1_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <MX_I2C1_Init+0x74>)
 80006d8:	0018      	movs	r0, r3
 80006da:	f001 f80b 	bl	80016f4 <HAL_I2C_Init>
 80006de:	1e03      	subs	r3, r0, #0
 80006e0:	d001      	beq.n	80006e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006e2:	f000 f95d 	bl	80009a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <MX_I2C1_Init+0x74>)
 80006e8:	2100      	movs	r1, #0
 80006ea:	0018      	movs	r0, r3
 80006ec:	f001 f898 	bl	8001820 <HAL_I2CEx_ConfigAnalogFilter>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d001      	beq.n	80006f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006f4:	f000 f954 	bl	80009a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006f8:	4b05      	ldr	r3, [pc, #20]	@ (8000710 <MX_I2C1_Init+0x74>)
 80006fa:	2100      	movs	r1, #0
 80006fc:	0018      	movs	r0, r3
 80006fe:	f001 f8db 	bl	80018b8 <HAL_I2CEx_ConfigDigitalFilter>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d001      	beq.n	800070a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000706:	f000 f94b 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800070a:	46c0      	nop			@ (mov r8, r8)
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000084 	.word	0x20000084
 8000714:	40005400 	.word	0x40005400
 8000718:	00503d58 	.word	0x00503d58

0800071c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <MX_SPI1_Init+0x68>)
 8000722:	4a19      	ldr	r2, [pc, #100]	@ (8000788 <MX_SPI1_Init+0x6c>)
 8000724:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <MX_SPI1_Init+0x68>)
 8000728:	2282      	movs	r2, #130	@ 0x82
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072e:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <MX_SPI1_Init+0x68>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000734:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <MX_SPI1_Init+0x68>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800073a:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <MX_SPI1_Init+0x68>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000740:	4b10      	ldr	r3, [pc, #64]	@ (8000784 <MX_SPI1_Init+0x68>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000746:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <MX_SPI1_Init+0x68>)
 8000748:	2280      	movs	r2, #128	@ 0x80
 800074a:	0092      	lsls	r2, r2, #2
 800074c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800074e:	4b0d      	ldr	r3, [pc, #52]	@ (8000784 <MX_SPI1_Init+0x68>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000754:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <MX_SPI1_Init+0x68>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800075a:	4b0a      	ldr	r3, [pc, #40]	@ (8000784 <MX_SPI1_Init+0x68>)
 800075c:	2200      	movs	r2, #0
 800075e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000760:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <MX_SPI1_Init+0x68>)
 8000762:	2200      	movs	r2, #0
 8000764:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000766:	4b07      	ldr	r3, [pc, #28]	@ (8000784 <MX_SPI1_Init+0x68>)
 8000768:	2207      	movs	r2, #7
 800076a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800076c:	4b05      	ldr	r3, [pc, #20]	@ (8000784 <MX_SPI1_Init+0x68>)
 800076e:	0018      	movs	r0, r3
 8000770:	f002 f9ae 	bl	8002ad0 <HAL_SPI_Init>
 8000774:	1e03      	subs	r3, r0, #0
 8000776:	d001      	beq.n	800077c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000778:	f000 f912 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800077c:	46c0      	nop			@ (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			@ (mov r8, r8)
 8000784:	200000d8 	.word	0x200000d8
 8000788:	40013000 	.word	0x40013000

0800078c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000790:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <MX_USART1_UART_Init+0x58>)
 8000792:	4a15      	ldr	r2, [pc, #84]	@ (80007e8 <MX_USART1_UART_Init+0x5c>)
 8000794:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000796:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <MX_USART1_UART_Init+0x58>)
 8000798:	22e1      	movs	r2, #225	@ 0xe1
 800079a:	0252      	lsls	r2, r2, #9
 800079c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_USART1_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <MX_USART1_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_USART1_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <MX_USART1_UART_Init+0x58>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <MX_USART1_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <MX_USART1_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <MX_USART1_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <MX_USART1_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ce:	4b05      	ldr	r3, [pc, #20]	@ (80007e4 <MX_USART1_UART_Init+0x58>)
 80007d0:	0018      	movs	r0, r3
 80007d2:	f002 fa11 	bl	8002bf8 <HAL_UART_Init>
 80007d6:	1e03      	subs	r3, r0, #0
 80007d8:	d001      	beq.n	80007de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007da:	f000 f8e1 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000130 	.word	0x20000130
 80007e8:	40013800 	.word	0x40013800

080007ec <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 80007f0:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <MX_USART5_UART_Init+0x58>)
 80007f2:	4a15      	ldr	r2, [pc, #84]	@ (8000848 <MX_USART5_UART_Init+0x5c>)
 80007f4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80007f6:	4b13      	ldr	r3, [pc, #76]	@ (8000844 <MX_USART5_UART_Init+0x58>)
 80007f8:	22e1      	movs	r2, #225	@ 0xe1
 80007fa:	0252      	lsls	r2, r2, #9
 80007fc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <MX_USART5_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <MX_USART5_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_USART5_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <MX_USART5_UART_Init+0x58>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <MX_USART5_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_USART5_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000822:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <MX_USART5_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_USART5_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800082e:	4b05      	ldr	r3, [pc, #20]	@ (8000844 <MX_USART5_UART_Init+0x58>)
 8000830:	0018      	movs	r0, r3
 8000832:	f002 f9e1 	bl	8002bf8 <HAL_UART_Init>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d001      	beq.n	800083e <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 800083a:	f000 f8b1 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200001b8 	.word	0x200001b8
 8000848:	40005000 	.word	0x40005000

0800084c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000850:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <MX_USB_PCD_Init+0x44>)
 8000852:	4a10      	ldr	r2, [pc, #64]	@ (8000894 <MX_USB_PCD_Init+0x48>)
 8000854:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000856:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <MX_USB_PCD_Init+0x44>)
 8000858:	2208      	movs	r2, #8
 800085a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800085c:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <MX_USB_PCD_Init+0x44>)
 800085e:	2202      	movs	r2, #2
 8000860:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000862:	4b0b      	ldr	r3, [pc, #44]	@ (8000890 <MX_USB_PCD_Init+0x44>)
 8000864:	2202      	movs	r2, #2
 8000866:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000868:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <MX_USB_PCD_Init+0x44>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800086e:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <MX_USB_PCD_Init+0x44>)
 8000870:	2200      	movs	r2, #0
 8000872:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000874:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <MX_USB_PCD_Init+0x44>)
 8000876:	2200      	movs	r2, #0
 8000878:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800087a:	4b05      	ldr	r3, [pc, #20]	@ (8000890 <MX_USB_PCD_Init+0x44>)
 800087c:	0018      	movs	r0, r3
 800087e:	f001 f867 	bl	8001950 <HAL_PCD_Init>
 8000882:	1e03      	subs	r3, r0, #0
 8000884:	d001      	beq.n	800088a <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8000886:	f000 f88b 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000240 	.word	0x20000240
 8000894:	40005c00 	.word	0x40005c00

08000898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000898:	b590      	push	{r4, r7, lr}
 800089a:	b089      	sub	sp, #36	@ 0x24
 800089c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089e:	240c      	movs	r4, #12
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	0018      	movs	r0, r3
 80008a4:	2314      	movs	r3, #20
 80008a6:	001a      	movs	r2, r3
 80008a8:	2100      	movs	r1, #0
 80008aa:	f002 ff02 	bl	80036b2 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ae:	4b39      	ldr	r3, [pc, #228]	@ (8000994 <MX_GPIO_Init+0xfc>)
 80008b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008b2:	4b38      	ldr	r3, [pc, #224]	@ (8000994 <MX_GPIO_Init+0xfc>)
 80008b4:	2104      	movs	r1, #4
 80008b6:	430a      	orrs	r2, r1
 80008b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008ba:	4b36      	ldr	r3, [pc, #216]	@ (8000994 <MX_GPIO_Init+0xfc>)
 80008bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008be:	2204      	movs	r2, #4
 80008c0:	4013      	ands	r3, r2
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	4b33      	ldr	r3, [pc, #204]	@ (8000994 <MX_GPIO_Init+0xfc>)
 80008c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008ca:	4b32      	ldr	r3, [pc, #200]	@ (8000994 <MX_GPIO_Init+0xfc>)
 80008cc:	2101      	movs	r1, #1
 80008ce:	430a      	orrs	r2, r1
 80008d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008d2:	4b30      	ldr	r3, [pc, #192]	@ (8000994 <MX_GPIO_Init+0xfc>)
 80008d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008d6:	2201      	movs	r2, #1
 80008d8:	4013      	ands	r3, r2
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	4b2d      	ldr	r3, [pc, #180]	@ (8000994 <MX_GPIO_Init+0xfc>)
 80008e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000994 <MX_GPIO_Init+0xfc>)
 80008e4:	2102      	movs	r1, #2
 80008e6:	430a      	orrs	r2, r1
 80008e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000994 <MX_GPIO_Init+0xfc>)
 80008ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008ee:	2202      	movs	r2, #2
 80008f0:	4013      	ands	r3, r2
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_OFF_5V_GPIO_Port, ON_OFF_5V_Pin, GPIO_PIN_RESET);
 80008f6:	23a0      	movs	r3, #160	@ 0xa0
 80008f8:	05db      	lsls	r3, r3, #23
 80008fa:	2200      	movs	r2, #0
 80008fc:	2104      	movs	r1, #4
 80008fe:	0018      	movs	r0, r3
 8000900:	f000 feda 	bl	80016b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FLASH_CS_Pin|FRAM_CS_Pin|PMS_RST_Pin, GPIO_PIN_SET);
 8000904:	238c      	movs	r3, #140	@ 0x8c
 8000906:	0059      	lsls	r1, r3, #1
 8000908:	23a0      	movs	r3, #160	@ 0xa0
 800090a:	05db      	lsls	r3, r3, #23
 800090c:	2201      	movs	r2, #1
 800090e:	0018      	movs	r0, r3
 8000910:	f000 fed2 	bl	80016b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, E_INC_CS_Pin|E_INC_RST_Pin|E_INC_DC_Pin|PMS_SET_Pin, GPIO_PIN_SET);
 8000914:	4920      	ldr	r1, [pc, #128]	@ (8000998 <MX_GPIO_Init+0x100>)
 8000916:	4b21      	ldr	r3, [pc, #132]	@ (800099c <MX_GPIO_Init+0x104>)
 8000918:	2201      	movs	r2, #1
 800091a:	0018      	movs	r0, r3
 800091c:	f000 fecc 	bl	80016b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ON_OFF_5V_Pin FLASH_CS_Pin FRAM_CS_Pin PMS_RST_Pin */
  GPIO_InitStruct.Pin = ON_OFF_5V_Pin|FLASH_CS_Pin|FRAM_CS_Pin|PMS_RST_Pin;
 8000920:	193b      	adds	r3, r7, r4
 8000922:	228e      	movs	r2, #142	@ 0x8e
 8000924:	0052      	lsls	r2, r2, #1
 8000926:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	193b      	adds	r3, r7, r4
 800092a:	2201      	movs	r2, #1
 800092c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	193b      	adds	r3, r7, r4
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	193b      	adds	r3, r7, r4
 8000936:	2203      	movs	r2, #3
 8000938:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	193a      	adds	r2, r7, r4
 800093c:	23a0      	movs	r3, #160	@ 0xa0
 800093e:	05db      	lsls	r3, r3, #23
 8000940:	0011      	movs	r1, r2
 8000942:	0018      	movs	r0, r3
 8000944:	f000 fd3a 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pins : E_INC_CS_Pin E_INC_RST_Pin E_INC_DC_Pin PMS_SET_Pin */
  GPIO_InitStruct.Pin = E_INC_CS_Pin|E_INC_RST_Pin|E_INC_DC_Pin|PMS_SET_Pin;
 8000948:	193b      	adds	r3, r7, r4
 800094a:	4a13      	ldr	r2, [pc, #76]	@ (8000998 <MX_GPIO_Init+0x100>)
 800094c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	193b      	adds	r3, r7, r4
 8000950:	2201      	movs	r2, #1
 8000952:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	193b      	adds	r3, r7, r4
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095a:	193b      	adds	r3, r7, r4
 800095c:	2203      	movs	r2, #3
 800095e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000960:	193b      	adds	r3, r7, r4
 8000962:	4a0e      	ldr	r2, [pc, #56]	@ (800099c <MX_GPIO_Init+0x104>)
 8000964:	0019      	movs	r1, r3
 8000966:	0010      	movs	r0, r2
 8000968:	f000 fd28 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pin : E_INC_BUSY_Pin */
  GPIO_InitStruct.Pin = E_INC_BUSY_Pin;
 800096c:	0021      	movs	r1, r4
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2204      	movs	r2, #4
 8000972:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000974:	187b      	adds	r3, r7, r1
 8000976:	2200      	movs	r2, #0
 8000978:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(E_INC_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000980:	187b      	adds	r3, r7, r1
 8000982:	4a06      	ldr	r2, [pc, #24]	@ (800099c <MX_GPIO_Init+0x104>)
 8000984:	0019      	movs	r1, r3
 8000986:	0010      	movs	r0, r2
 8000988:	f000 fd18 	bl	80013bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800098c:	46c0      	nop			@ (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	b009      	add	sp, #36	@ 0x24
 8000992:	bd90      	pop	{r4, r7, pc}
 8000994:	40021000 	.word	0x40021000
 8000998:	00008403 	.word	0x00008403
 800099c:	50000400 	.word	0x50000400

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	46c0      	nop			@ (mov r8, r8)
 80009aa:	e7fd      	b.n	80009a8 <Error_Handler+0x8>

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b0:	4b07      	ldr	r3, [pc, #28]	@ (80009d0 <HAL_MspInit+0x24>)
 80009b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <HAL_MspInit+0x24>)
 80009b6:	2101      	movs	r1, #1
 80009b8:	430a      	orrs	r2, r1
 80009ba:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80009bc:	4b04      	ldr	r3, [pc, #16]	@ (80009d0 <HAL_MspInit+0x24>)
 80009be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009c0:	4b03      	ldr	r3, [pc, #12]	@ (80009d0 <HAL_MspInit+0x24>)
 80009c2:	2180      	movs	r1, #128	@ 0x80
 80009c4:	0549      	lsls	r1, r1, #21
 80009c6:	430a      	orrs	r2, r1
 80009c8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ca:	46c0      	nop			@ (mov r8, r8)
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40021000 	.word	0x40021000

080009d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b089      	sub	sp, #36	@ 0x24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	240c      	movs	r4, #12
 80009de:	193b      	adds	r3, r7, r4
 80009e0:	0018      	movs	r0, r3
 80009e2:	2314      	movs	r3, #20
 80009e4:	001a      	movs	r2, r3
 80009e6:	2100      	movs	r1, #0
 80009e8:	f002 fe63 	bl	80036b2 <memset>
  if(hadc->Instance==ADC1)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a14      	ldr	r2, [pc, #80]	@ (8000a44 <HAL_ADC_MspInit+0x70>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d122      	bne.n	8000a3c <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009f6:	4b14      	ldr	r3, [pc, #80]	@ (8000a48 <HAL_ADC_MspInit+0x74>)
 80009f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009fa:	4b13      	ldr	r3, [pc, #76]	@ (8000a48 <HAL_ADC_MspInit+0x74>)
 80009fc:	2180      	movs	r1, #128	@ 0x80
 80009fe:	0089      	lsls	r1, r1, #2
 8000a00:	430a      	orrs	r2, r1
 8000a02:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a04:	4b10      	ldr	r3, [pc, #64]	@ (8000a48 <HAL_ADC_MspInit+0x74>)
 8000a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a08:	4b0f      	ldr	r3, [pc, #60]	@ (8000a48 <HAL_ADC_MspInit+0x74>)
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a10:	4b0d      	ldr	r3, [pc, #52]	@ (8000a48 <HAL_ADC_MspInit+0x74>)
 8000a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a14:	2201      	movs	r2, #1
 8000a16:	4013      	ands	r3, r2
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a1c:	193b      	adds	r3, r7, r4
 8000a1e:	2203      	movs	r2, #3
 8000a20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a22:	193b      	adds	r3, r7, r4
 8000a24:	2203      	movs	r2, #3
 8000a26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	193b      	adds	r3, r7, r4
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	193a      	adds	r2, r7, r4
 8000a30:	23a0      	movs	r3, #160	@ 0xa0
 8000a32:	05db      	lsls	r3, r3, #23
 8000a34:	0011      	movs	r1, r2
 8000a36:	0018      	movs	r0, r3
 8000a38:	f000 fcc0 	bl	80013bc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a3c:	46c0      	nop			@ (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b009      	add	sp, #36	@ 0x24
 8000a42:	bd90      	pop	{r4, r7, pc}
 8000a44:	40012400 	.word	0x40012400
 8000a48:	40021000 	.word	0x40021000

08000a4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a4c:	b590      	push	{r4, r7, lr}
 8000a4e:	b089      	sub	sp, #36	@ 0x24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	240c      	movs	r4, #12
 8000a56:	193b      	adds	r3, r7, r4
 8000a58:	0018      	movs	r0, r3
 8000a5a:	2314      	movs	r3, #20
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	2100      	movs	r1, #0
 8000a60:	f002 fe27 	bl	80036b2 <memset>
  if(hi2c->Instance==I2C1)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a17      	ldr	r2, [pc, #92]	@ (8000ac8 <HAL_I2C_MspInit+0x7c>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d128      	bne.n	8000ac0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6e:	4b17      	ldr	r3, [pc, #92]	@ (8000acc <HAL_I2C_MspInit+0x80>)
 8000a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a72:	4b16      	ldr	r3, [pc, #88]	@ (8000acc <HAL_I2C_MspInit+0x80>)
 8000a74:	2102      	movs	r1, #2
 8000a76:	430a      	orrs	r2, r1
 8000a78:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a7a:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <HAL_I2C_MspInit+0x80>)
 8000a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a7e:	2202      	movs	r2, #2
 8000a80:	4013      	ands	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a86:	0021      	movs	r1, r4
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	22c0      	movs	r2, #192	@ 0xc0
 8000a8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2212      	movs	r2, #18
 8000a92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	4a09      	ldr	r2, [pc, #36]	@ (8000ad0 <HAL_I2C_MspInit+0x84>)
 8000aaa:	0019      	movs	r1, r3
 8000aac:	0010      	movs	r0, r2
 8000aae:	f000 fc85 	bl	80013bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ab2:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <HAL_I2C_MspInit+0x80>)
 8000ab4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000ab6:	4b05      	ldr	r3, [pc, #20]	@ (8000acc <HAL_I2C_MspInit+0x80>)
 8000ab8:	2180      	movs	r1, #128	@ 0x80
 8000aba:	0389      	lsls	r1, r1, #14
 8000abc:	430a      	orrs	r2, r1
 8000abe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ac0:	46c0      	nop			@ (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b009      	add	sp, #36	@ 0x24
 8000ac6:	bd90      	pop	{r4, r7, pc}
 8000ac8:	40005400 	.word	0x40005400
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	50000400 	.word	0x50000400

08000ad4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b089      	sub	sp, #36	@ 0x24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	240c      	movs	r4, #12
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	2314      	movs	r3, #20
 8000ae4:	001a      	movs	r2, r3
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	f002 fde3 	bl	80036b2 <memset>
  if(hspi->Instance==SPI1)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a18      	ldr	r2, [pc, #96]	@ (8000b54 <HAL_SPI_MspInit+0x80>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d129      	bne.n	8000b4a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000af6:	4b18      	ldr	r3, [pc, #96]	@ (8000b58 <HAL_SPI_MspInit+0x84>)
 8000af8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000afa:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <HAL_SPI_MspInit+0x84>)
 8000afc:	2180      	movs	r1, #128	@ 0x80
 8000afe:	0149      	lsls	r1, r1, #5
 8000b00:	430a      	orrs	r2, r1
 8000b02:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b04:	4b14      	ldr	r3, [pc, #80]	@ (8000b58 <HAL_SPI_MspInit+0x84>)
 8000b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b08:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <HAL_SPI_MspInit+0x84>)
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b10:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <HAL_SPI_MspInit+0x84>)
 8000b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b14:	2201      	movs	r2, #1
 8000b16:	4013      	ands	r3, r2
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b1c:	0021      	movs	r1, r4
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	22e0      	movs	r2, #224	@ 0xe0
 8000b22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	2202      	movs	r2, #2
 8000b28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	2203      	movs	r2, #3
 8000b34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	187a      	adds	r2, r7, r1
 8000b3e:	23a0      	movs	r3, #160	@ 0xa0
 8000b40:	05db      	lsls	r3, r3, #23
 8000b42:	0011      	movs	r1, r2
 8000b44:	0018      	movs	r0, r3
 8000b46:	f000 fc39 	bl	80013bc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b009      	add	sp, #36	@ 0x24
 8000b50:	bd90      	pop	{r4, r7, pc}
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	40013000 	.word	0x40013000
 8000b58:	40021000 	.word	0x40021000

08000b5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b5c:	b590      	push	{r4, r7, lr}
 8000b5e:	b08b      	sub	sp, #44	@ 0x2c
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	2414      	movs	r4, #20
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	0018      	movs	r0, r3
 8000b6a:	2314      	movs	r3, #20
 8000b6c:	001a      	movs	r2, r3
 8000b6e:	2100      	movs	r1, #0
 8000b70:	f002 fd9f 	bl	80036b2 <memset>
  if(huart->Instance==USART1)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a30      	ldr	r2, [pc, #192]	@ (8000c3c <HAL_UART_MspInit+0xe0>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d12b      	bne.n	8000bd6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b7e:	4b30      	ldr	r3, [pc, #192]	@ (8000c40 <HAL_UART_MspInit+0xe4>)
 8000b80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b82:	4b2f      	ldr	r3, [pc, #188]	@ (8000c40 <HAL_UART_MspInit+0xe4>)
 8000b84:	2180      	movs	r1, #128	@ 0x80
 8000b86:	01c9      	lsls	r1, r1, #7
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	4b2c      	ldr	r3, [pc, #176]	@ (8000c40 <HAL_UART_MspInit+0xe4>)
 8000b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b90:	4b2b      	ldr	r3, [pc, #172]	@ (8000c40 <HAL_UART_MspInit+0xe4>)
 8000b92:	2101      	movs	r1, #1
 8000b94:	430a      	orrs	r2, r1
 8000b96:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b98:	4b29      	ldr	r3, [pc, #164]	@ (8000c40 <HAL_UART_MspInit+0xe4>)
 8000b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ba4:	193b      	adds	r3, r7, r4
 8000ba6:	22c0      	movs	r2, #192	@ 0xc0
 8000ba8:	00d2      	lsls	r2, r2, #3
 8000baa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	0021      	movs	r1, r4
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	2204      	movs	r2, #4
 8000bc4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	187a      	adds	r2, r7, r1
 8000bc8:	23a0      	movs	r3, #160	@ 0xa0
 8000bca:	05db      	lsls	r3, r3, #23
 8000bcc:	0011      	movs	r1, r2
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f000 fbf4 	bl	80013bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8000bd4:	e02d      	b.n	8000c32 <HAL_UART_MspInit+0xd6>
  else if(huart->Instance==USART5)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a1a      	ldr	r2, [pc, #104]	@ (8000c44 <HAL_UART_MspInit+0xe8>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d128      	bne.n	8000c32 <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART5_CLK_ENABLE();
 8000be0:	4b17      	ldr	r3, [pc, #92]	@ (8000c40 <HAL_UART_MspInit+0xe4>)
 8000be2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000be4:	4b16      	ldr	r3, [pc, #88]	@ (8000c40 <HAL_UART_MspInit+0xe4>)
 8000be6:	2180      	movs	r1, #128	@ 0x80
 8000be8:	0349      	lsls	r1, r1, #13
 8000bea:	430a      	orrs	r2, r1
 8000bec:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bee:	4b14      	ldr	r3, [pc, #80]	@ (8000c40 <HAL_UART_MspInit+0xe4>)
 8000bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000bf2:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <HAL_UART_MspInit+0xe4>)
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000bfa:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <HAL_UART_MspInit+0xe4>)
 8000bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bfe:	2202      	movs	r2, #2
 8000c00:	4013      	ands	r3, r2
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000c06:	2114      	movs	r1, #20
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	2218      	movs	r2, #24
 8000c0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	2202      	movs	r2, #2
 8000c12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	187b      	adds	r3, r7, r1
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	2206      	movs	r2, #6
 8000c24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c26:	187b      	adds	r3, r7, r1
 8000c28:	4a07      	ldr	r2, [pc, #28]	@ (8000c48 <HAL_UART_MspInit+0xec>)
 8000c2a:	0019      	movs	r1, r3
 8000c2c:	0010      	movs	r0, r2
 8000c2e:	f000 fbc5 	bl	80013bc <HAL_GPIO_Init>
}
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b00b      	add	sp, #44	@ 0x2c
 8000c38:	bd90      	pop	{r4, r7, pc}
 8000c3a:	46c0      	nop			@ (mov r8, r8)
 8000c3c:	40013800 	.word	0x40013800
 8000c40:	40021000 	.word	0x40021000
 8000c44:	40005000 	.word	0x40005000
 8000c48:	50000400 	.word	0x50000400

08000c4c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a06      	ldr	r2, [pc, #24]	@ (8000c74 <HAL_PCD_MspInit+0x28>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d106      	bne.n	8000c6c <HAL_PCD_MspInit+0x20>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000c5e:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <HAL_PCD_MspInit+0x2c>)
 8000c60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c62:	4b05      	ldr	r3, [pc, #20]	@ (8000c78 <HAL_PCD_MspInit+0x2c>)
 8000c64:	2180      	movs	r1, #128	@ 0x80
 8000c66:	0409      	lsls	r1, r1, #16
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END USB_MspInit 1 */

  }

}
 8000c6c:	46c0      	nop			@ (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	b002      	add	sp, #8
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40005c00 	.word	0x40005c00
 8000c78:	40021000 	.word	0x40021000

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c80:	46c0      	nop			@ (mov r8, r8)
 8000c82:	e7fd      	b.n	8000c80 <NMI_Handler+0x4>

08000c84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c88:	46c0      	nop			@ (mov r8, r8)
 8000c8a:	e7fd      	b.n	8000c88 <HardFault_Handler+0x4>

08000c8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c90:	46c0      	nop			@ (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9a:	46c0      	nop			@ (mov r8, r8)
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca4:	f000 f886 	bl	8000db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca8:	46c0      	nop			@ (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb2:	46c0      	nop			@ (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000cb8:	480d      	ldr	r0, [pc, #52]	@ (8000cf0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000cba:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cbc:	f7ff fff7 	bl	8000cae <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc0:	480c      	ldr	r0, [pc, #48]	@ (8000cf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cc2:	490d      	ldr	r1, [pc, #52]	@ (8000cf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cfc <LoopForever+0xe>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc8:	e002      	b.n	8000cd0 <LoopCopyDataInit>

08000cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cce:	3304      	adds	r3, #4

08000cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd4:	d3f9      	bcc.n	8000cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd8:	4c0a      	ldr	r4, [pc, #40]	@ (8000d04 <LoopForever+0x16>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cdc:	e001      	b.n	8000ce2 <LoopFillZerobss>

08000cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce0:	3204      	adds	r2, #4

08000ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce4:	d3fb      	bcc.n	8000cde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce6:	f002 fced 	bl	80036c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cea:	f7ff fbdd 	bl	80004a8 <main>

08000cee <LoopForever>:

LoopForever:
    b LoopForever
 8000cee:	e7fe      	b.n	8000cee <LoopForever>
   ldr   r0, =_estack
 8000cf0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cfc:	080037a0 	.word	0x080037a0
  ldr r2, =_sbss
 8000d00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d04:	20000538 	.word	0x20000538

08000d08 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <ADC1_COMP_IRQHandler>
	...

08000d0c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000d18:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <HAL_Init+0x3c>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d48 <HAL_Init+0x3c>)
 8000d1e:	2140      	movs	r1, #64	@ 0x40
 8000d20:	430a      	orrs	r2, r1
 8000d22:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 f811 	bl	8000d4c <HAL_InitTick>
 8000d2a:	1e03      	subs	r3, r0, #0
 8000d2c:	d003      	beq.n	8000d36 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	2201      	movs	r2, #1
 8000d32:	701a      	strb	r2, [r3, #0]
 8000d34:	e001      	b.n	8000d3a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d36:	f7ff fe39 	bl	80009ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	781b      	ldrb	r3, [r3, #0]
}
 8000d3e:	0018      	movs	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b002      	add	sp, #8
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	46c0      	nop			@ (mov r8, r8)
 8000d48:	40022000 	.word	0x40022000

08000d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d54:	4b14      	ldr	r3, [pc, #80]	@ (8000da8 <HAL_InitTick+0x5c>)
 8000d56:	681c      	ldr	r4, [r3, #0]
 8000d58:	4b14      	ldr	r3, [pc, #80]	@ (8000dac <HAL_InitTick+0x60>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	0019      	movs	r1, r3
 8000d5e:	23fa      	movs	r3, #250	@ 0xfa
 8000d60:	0098      	lsls	r0, r3, #2
 8000d62:	f7ff f9d1 	bl	8000108 <__udivsi3>
 8000d66:	0003      	movs	r3, r0
 8000d68:	0019      	movs	r1, r3
 8000d6a:	0020      	movs	r0, r4
 8000d6c:	f7ff f9cc 	bl	8000108 <__udivsi3>
 8000d70:	0003      	movs	r3, r0
 8000d72:	0018      	movs	r0, r3
 8000d74:	f000 fb15 	bl	80013a2 <HAL_SYSTICK_Config>
 8000d78:	1e03      	subs	r3, r0, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e00f      	b.n	8000da0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d80b      	bhi.n	8000d9e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	2301      	movs	r3, #1
 8000d8a:	425b      	negs	r3, r3
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f000 faf2 	bl	8001378 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <HAL_InitTick+0x64>)
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e000      	b.n	8000da0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	0018      	movs	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b003      	add	sp, #12
 8000da6:	bd90      	pop	{r4, r7, pc}
 8000da8:	20000000 	.word	0x20000000
 8000dac:	20000008 	.word	0x20000008
 8000db0:	20000004 	.word	0x20000004

08000db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db8:	4b05      	ldr	r3, [pc, #20]	@ (8000dd0 <HAL_IncTick+0x1c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	001a      	movs	r2, r3
 8000dbe:	4b05      	ldr	r3, [pc, #20]	@ (8000dd4 <HAL_IncTick+0x20>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	18d2      	adds	r2, r2, r3
 8000dc4:	4b03      	ldr	r3, [pc, #12]	@ (8000dd4 <HAL_IncTick+0x20>)
 8000dc6:	601a      	str	r2, [r3, #0]
}
 8000dc8:	46c0      	nop			@ (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	46c0      	nop			@ (mov r8, r8)
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20000534 	.word	0x20000534

08000dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b02      	ldr	r3, [pc, #8]	@ (8000de8 <HAL_GetTick+0x10>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	0018      	movs	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			@ (mov r8, r8)
 8000de8:	20000534 	.word	0x20000534

08000dec <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d101      	bne.n	8000dfe <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e159      	b.n	80010b2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d10a      	bne.n	8000e1c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2250      	movs	r2, #80	@ 0x50
 8000e10:	2100      	movs	r1, #0
 8000e12:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	0018      	movs	r0, r3
 8000e18:	f7ff fddc 	bl	80009d4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e20:	2210      	movs	r2, #16
 8000e22:	4013      	ands	r3, r2
 8000e24:	2b10      	cmp	r3, #16
 8000e26:	d005      	beq.n	8000e34 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	2204      	movs	r2, #4
 8000e30:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000e32:	d00b      	beq.n	8000e4c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e38:	2210      	movs	r2, #16
 8000e3a:	431a      	orrs	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2250      	movs	r2, #80	@ 0x50
 8000e44:	2100      	movs	r1, #0
 8000e46:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e132      	b.n	80010b2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e50:	4a9a      	ldr	r2, [pc, #616]	@ (80010bc <HAL_ADC_Init+0x2d0>)
 8000e52:	4013      	ands	r3, r2
 8000e54:	2202      	movs	r2, #2
 8000e56:	431a      	orrs	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	2203      	movs	r2, #3
 8000e64:	4013      	ands	r3, r2
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d108      	bne.n	8000e7c <HAL_ADC_Init+0x90>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2201      	movs	r2, #1
 8000e72:	4013      	ands	r3, r2
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d101      	bne.n	8000e7c <HAL_ADC_Init+0x90>
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e000      	b.n	8000e7e <HAL_ADC_Init+0x92>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d149      	bne.n	8000f16 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685a      	ldr	r2, [r3, #4]
 8000e86:	23c0      	movs	r3, #192	@ 0xc0
 8000e88:	061b      	lsls	r3, r3, #24
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d00b      	beq.n	8000ea6 <HAL_ADC_Init+0xba>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	685a      	ldr	r2, [r3, #4]
 8000e92:	2380      	movs	r3, #128	@ 0x80
 8000e94:	05db      	lsls	r3, r3, #23
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d005      	beq.n	8000ea6 <HAL_ADC_Init+0xba>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	2380      	movs	r3, #128	@ 0x80
 8000ea0:	061b      	lsls	r3, r3, #24
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d111      	bne.n	8000eca <HAL_ADC_Init+0xde>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	691a      	ldr	r2, [r3, #16]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	0092      	lsls	r2, r2, #2
 8000eb2:	0892      	lsrs	r2, r2, #2
 8000eb4:	611a      	str	r2, [r3, #16]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	6919      	ldr	r1, [r3, #16]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685a      	ldr	r2, [r3, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	611a      	str	r2, [r3, #16]
 8000ec8:	e014      	b.n	8000ef4 <HAL_ADC_Init+0x108>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	691a      	ldr	r2, [r3, #16]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	0092      	lsls	r2, r2, #2
 8000ed6:	0892      	lsrs	r2, r2, #2
 8000ed8:	611a      	str	r2, [r3, #16]
 8000eda:	4b79      	ldr	r3, [pc, #484]	@ (80010c0 <HAL_ADC_Init+0x2d4>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	4b78      	ldr	r3, [pc, #480]	@ (80010c0 <HAL_ADC_Init+0x2d4>)
 8000ee0:	4978      	ldr	r1, [pc, #480]	@ (80010c4 <HAL_ADC_Init+0x2d8>)
 8000ee2:	400a      	ands	r2, r1
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	4b76      	ldr	r3, [pc, #472]	@ (80010c0 <HAL_ADC_Init+0x2d4>)
 8000ee8:	6819      	ldr	r1, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	4b74      	ldr	r3, [pc, #464]	@ (80010c0 <HAL_ADC_Init+0x2d4>)
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	68da      	ldr	r2, [r3, #12]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2118      	movs	r1, #24
 8000f00:	438a      	bics	r2, r1
 8000f02:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	68d9      	ldr	r1, [r3, #12]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	689a      	ldr	r2, [r3, #8]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	430a      	orrs	r2, r1
 8000f14:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000f16:	4b6a      	ldr	r3, [pc, #424]	@ (80010c0 <HAL_ADC_Init+0x2d4>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	4b69      	ldr	r3, [pc, #420]	@ (80010c0 <HAL_ADC_Init+0x2d4>)
 8000f1c:	496a      	ldr	r1, [pc, #424]	@ (80010c8 <HAL_ADC_Init+0x2dc>)
 8000f1e:	400a      	ands	r2, r1
 8000f20:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8000f22:	4b67      	ldr	r3, [pc, #412]	@ (80010c0 <HAL_ADC_Init+0x2d4>)
 8000f24:	6819      	ldr	r1, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f2a:	065a      	lsls	r2, r3, #25
 8000f2c:	4b64      	ldr	r3, [pc, #400]	@ (80010c0 <HAL_ADC_Init+0x2d4>)
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	689a      	ldr	r2, [r3, #8]
 8000f38:	2380      	movs	r3, #128	@ 0x80
 8000f3a:	055b      	lsls	r3, r3, #21
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	d108      	bne.n	8000f52 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	689a      	ldr	r2, [r3, #8]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2180      	movs	r1, #128	@ 0x80
 8000f4c:	0549      	lsls	r1, r1, #21
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	68da      	ldr	r2, [r3, #12]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	495b      	ldr	r1, [pc, #364]	@ (80010cc <HAL_ADC_Init+0x2e0>)
 8000f5e:	400a      	ands	r2, r1
 8000f60:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	68d9      	ldr	r1, [r3, #12]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	691b      	ldr	r3, [r3, #16]
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d101      	bne.n	8000f78 <HAL_ADC_Init+0x18c>
 8000f74:	2304      	movs	r3, #4
 8000f76:	e000      	b.n	8000f7a <HAL_ADC_Init+0x18e>
 8000f78:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f7a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2020      	movs	r0, #32
 8000f80:	5c1b      	ldrb	r3, [r3, r0]
 8000f82:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000f84:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	202c      	movs	r0, #44	@ 0x2c
 8000f8a:	5c1b      	ldrb	r3, [r3, r0]
 8000f8c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f8e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000f94:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000f9c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000fa4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	430a      	orrs	r2, r1
 8000fac:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fb2:	23c2      	movs	r3, #194	@ 0xc2
 8000fb4:	33ff      	adds	r3, #255	@ 0xff
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d00b      	beq.n	8000fd2 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	68d9      	ldr	r1, [r3, #12]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2221      	movs	r2, #33	@ 0x21
 8000fd6:	5c9b      	ldrb	r3, [r3, r2]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d11a      	bne.n	8001012 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2220      	movs	r2, #32
 8000fe0:	5c9b      	ldrb	r3, [r3, r2]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d109      	bne.n	8000ffa <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68da      	ldr	r2, [r3, #12]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2180      	movs	r1, #128	@ 0x80
 8000ff2:	0249      	lsls	r1, r1, #9
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	e00b      	b.n	8001012 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ffe:	2220      	movs	r2, #32
 8001000:	431a      	orrs	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800100a:	2201      	movs	r2, #1
 800100c:	431a      	orrs	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001016:	2b01      	cmp	r3, #1
 8001018:	d11f      	bne.n	800105a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	691a      	ldr	r2, [r3, #16]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	492a      	ldr	r1, [pc, #168]	@ (80010d0 <HAL_ADC_Init+0x2e4>)
 8001026:	400a      	ands	r2, r1
 8001028:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	6919      	ldr	r1, [r3, #16]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001038:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800103e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	430a      	orrs	r2, r1
 8001046:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	691a      	ldr	r2, [r3, #16]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2101      	movs	r1, #1
 8001054:	430a      	orrs	r2, r1
 8001056:	611a      	str	r2, [r3, #16]
 8001058:	e00e      	b.n	8001078 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	691b      	ldr	r3, [r3, #16]
 8001060:	2201      	movs	r2, #1
 8001062:	4013      	ands	r3, r2
 8001064:	2b01      	cmp	r3, #1
 8001066:	d107      	bne.n	8001078 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	691a      	ldr	r2, [r3, #16]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2101      	movs	r1, #1
 8001074:	438a      	bics	r2, r1
 8001076:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	695a      	ldr	r2, [r3, #20]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2107      	movs	r1, #7
 8001084:	438a      	bics	r2, r1
 8001086:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6959      	ldr	r1, [r3, #20]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	430a      	orrs	r2, r1
 8001098:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010a4:	2203      	movs	r2, #3
 80010a6:	4393      	bics	r3, r2
 80010a8:	2201      	movs	r2, #1
 80010aa:	431a      	orrs	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	0018      	movs	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	b002      	add	sp, #8
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	46c0      	nop			@ (mov r8, r8)
 80010bc:	fffffefd 	.word	0xfffffefd
 80010c0:	40012708 	.word	0x40012708
 80010c4:	ffc3ffff 	.word	0xffc3ffff
 80010c8:	fdffffff 	.word	0xfdffffff
 80010cc:	fffe0219 	.word	0xfffe0219
 80010d0:	fffffc03 	.word	0xfffffc03

080010d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2250      	movs	r2, #80	@ 0x50
 80010e2:	5c9b      	ldrb	r3, [r3, r2]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d101      	bne.n	80010ec <HAL_ADC_ConfigChannel+0x18>
 80010e8:	2302      	movs	r3, #2
 80010ea:	e085      	b.n	80011f8 <HAL_ADC_ConfigChannel+0x124>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2250      	movs	r2, #80	@ 0x50
 80010f0:	2101      	movs	r1, #1
 80010f2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	2204      	movs	r2, #4
 80010fc:	4013      	ands	r3, r2
 80010fe:	d00b      	beq.n	8001118 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001104:	2220      	movs	r2, #32
 8001106:	431a      	orrs	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2250      	movs	r2, #80	@ 0x50
 8001110:	2100      	movs	r1, #0
 8001112:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e06f      	b.n	80011f8 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	4a38      	ldr	r2, [pc, #224]	@ (8001200 <HAL_ADC_ConfigChannel+0x12c>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d035      	beq.n	800118e <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	035b      	lsls	r3, r3, #13
 800112e:	0b5a      	lsrs	r2, r3, #13
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	430a      	orrs	r2, r1
 8001136:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	2380      	movs	r3, #128	@ 0x80
 800113e:	02db      	lsls	r3, r3, #11
 8001140:	4013      	ands	r3, r2
 8001142:	d009      	beq.n	8001158 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001144:	4b2f      	ldr	r3, [pc, #188]	@ (8001204 <HAL_ADC_ConfigChannel+0x130>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b2e      	ldr	r3, [pc, #184]	@ (8001204 <HAL_ADC_ConfigChannel+0x130>)
 800114a:	2180      	movs	r1, #128	@ 0x80
 800114c:	0409      	lsls	r1, r1, #16
 800114e:	430a      	orrs	r2, r1
 8001150:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001152:	200a      	movs	r0, #10
 8001154:	f000 f85e 	bl	8001214 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	2380      	movs	r3, #128	@ 0x80
 800115e:	029b      	lsls	r3, r3, #10
 8001160:	4013      	ands	r3, r2
 8001162:	d006      	beq.n	8001172 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001164:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <HAL_ADC_ConfigChannel+0x130>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b26      	ldr	r3, [pc, #152]	@ (8001204 <HAL_ADC_ConfigChannel+0x130>)
 800116a:	2180      	movs	r1, #128	@ 0x80
 800116c:	03c9      	lsls	r1, r1, #15
 800116e:	430a      	orrs	r2, r1
 8001170:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	2380      	movs	r3, #128	@ 0x80
 8001178:	025b      	lsls	r3, r3, #9
 800117a:	4013      	ands	r3, r2
 800117c:	d037      	beq.n	80011ee <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 800117e:	4b21      	ldr	r3, [pc, #132]	@ (8001204 <HAL_ADC_ConfigChannel+0x130>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <HAL_ADC_ConfigChannel+0x130>)
 8001184:	2180      	movs	r1, #128	@ 0x80
 8001186:	0449      	lsls	r1, r1, #17
 8001188:	430a      	orrs	r2, r1
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	e02f      	b.n	80011ee <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	035b      	lsls	r3, r3, #13
 800119a:	0b5b      	lsrs	r3, r3, #13
 800119c:	43d9      	mvns	r1, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	400a      	ands	r2, r1
 80011a4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	2380      	movs	r3, #128	@ 0x80
 80011ac:	02db      	lsls	r3, r3, #11
 80011ae:	4013      	ands	r3, r2
 80011b0:	d005      	beq.n	80011be <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80011b2:	4b14      	ldr	r3, [pc, #80]	@ (8001204 <HAL_ADC_ConfigChannel+0x130>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4b13      	ldr	r3, [pc, #76]	@ (8001204 <HAL_ADC_ConfigChannel+0x130>)
 80011b8:	4913      	ldr	r1, [pc, #76]	@ (8001208 <HAL_ADC_ConfigChannel+0x134>)
 80011ba:	400a      	ands	r2, r1
 80011bc:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	2380      	movs	r3, #128	@ 0x80
 80011c4:	029b      	lsls	r3, r3, #10
 80011c6:	4013      	ands	r3, r2
 80011c8:	d005      	beq.n	80011d6 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001204 <HAL_ADC_ConfigChannel+0x130>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001204 <HAL_ADC_ConfigChannel+0x130>)
 80011d0:	490e      	ldr	r1, [pc, #56]	@ (800120c <HAL_ADC_ConfigChannel+0x138>)
 80011d2:	400a      	ands	r2, r1
 80011d4:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	2380      	movs	r3, #128	@ 0x80
 80011dc:	025b      	lsls	r3, r3, #9
 80011de:	4013      	ands	r3, r2
 80011e0:	d005      	beq.n	80011ee <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 80011e2:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <HAL_ADC_ConfigChannel+0x130>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	4b07      	ldr	r3, [pc, #28]	@ (8001204 <HAL_ADC_ConfigChannel+0x130>)
 80011e8:	4909      	ldr	r1, [pc, #36]	@ (8001210 <HAL_ADC_ConfigChannel+0x13c>)
 80011ea:	400a      	ands	r2, r1
 80011ec:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2250      	movs	r2, #80	@ 0x50
 80011f2:	2100      	movs	r1, #0
 80011f4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	0018      	movs	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b002      	add	sp, #8
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	00001001 	.word	0x00001001
 8001204:	40012708 	.word	0x40012708
 8001208:	ff7fffff 	.word	0xff7fffff
 800120c:	ffbfffff 	.word	0xffbfffff
 8001210:	feffffff 	.word	0xfeffffff

08001214 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800121c:	4b0b      	ldr	r3, [pc, #44]	@ (800124c <ADC_DelayMicroSecond+0x38>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	490b      	ldr	r1, [pc, #44]	@ (8001250 <ADC_DelayMicroSecond+0x3c>)
 8001222:	0018      	movs	r0, r3
 8001224:	f7fe ff70 	bl	8000108 <__udivsi3>
 8001228:	0003      	movs	r3, r0
 800122a:	001a      	movs	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4353      	muls	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8001232:	e002      	b.n	800123a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	3b01      	subs	r3, #1
 8001238:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1f9      	bne.n	8001234 <ADC_DelayMicroSecond+0x20>
  }
}
 8001240:	46c0      	nop			@ (mov r8, r8)
 8001242:	46c0      	nop			@ (mov r8, r8)
 8001244:	46bd      	mov	sp, r7
 8001246:	b004      	add	sp, #16
 8001248:	bd80      	pop	{r7, pc}
 800124a:	46c0      	nop			@ (mov r8, r8)
 800124c:	20000000 	.word	0x20000000
 8001250:	000f4240 	.word	0x000f4240

08001254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	0002      	movs	r2, r0
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	1dfb      	adds	r3, r7, #7
 8001260:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001262:	1dfb      	adds	r3, r7, #7
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b7f      	cmp	r3, #127	@ 0x7f
 8001268:	d828      	bhi.n	80012bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800126a:	4a2f      	ldr	r2, [pc, #188]	@ (8001328 <__NVIC_SetPriority+0xd4>)
 800126c:	1dfb      	adds	r3, r7, #7
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b25b      	sxtb	r3, r3
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	33c0      	adds	r3, #192	@ 0xc0
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	589b      	ldr	r3, [r3, r2]
 800127a:	1dfa      	adds	r2, r7, #7
 800127c:	7812      	ldrb	r2, [r2, #0]
 800127e:	0011      	movs	r1, r2
 8001280:	2203      	movs	r2, #3
 8001282:	400a      	ands	r2, r1
 8001284:	00d2      	lsls	r2, r2, #3
 8001286:	21ff      	movs	r1, #255	@ 0xff
 8001288:	4091      	lsls	r1, r2
 800128a:	000a      	movs	r2, r1
 800128c:	43d2      	mvns	r2, r2
 800128e:	401a      	ands	r2, r3
 8001290:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	019b      	lsls	r3, r3, #6
 8001296:	22ff      	movs	r2, #255	@ 0xff
 8001298:	401a      	ands	r2, r3
 800129a:	1dfb      	adds	r3, r7, #7
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	0018      	movs	r0, r3
 80012a0:	2303      	movs	r3, #3
 80012a2:	4003      	ands	r3, r0
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012a8:	481f      	ldr	r0, [pc, #124]	@ (8001328 <__NVIC_SetPriority+0xd4>)
 80012aa:	1dfb      	adds	r3, r7, #7
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	089b      	lsrs	r3, r3, #2
 80012b2:	430a      	orrs	r2, r1
 80012b4:	33c0      	adds	r3, #192	@ 0xc0
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012ba:	e031      	b.n	8001320 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012bc:	4a1b      	ldr	r2, [pc, #108]	@ (800132c <__NVIC_SetPriority+0xd8>)
 80012be:	1dfb      	adds	r3, r7, #7
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	0019      	movs	r1, r3
 80012c4:	230f      	movs	r3, #15
 80012c6:	400b      	ands	r3, r1
 80012c8:	3b08      	subs	r3, #8
 80012ca:	089b      	lsrs	r3, r3, #2
 80012cc:	3306      	adds	r3, #6
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	18d3      	adds	r3, r2, r3
 80012d2:	3304      	adds	r3, #4
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	1dfa      	adds	r2, r7, #7
 80012d8:	7812      	ldrb	r2, [r2, #0]
 80012da:	0011      	movs	r1, r2
 80012dc:	2203      	movs	r2, #3
 80012de:	400a      	ands	r2, r1
 80012e0:	00d2      	lsls	r2, r2, #3
 80012e2:	21ff      	movs	r1, #255	@ 0xff
 80012e4:	4091      	lsls	r1, r2
 80012e6:	000a      	movs	r2, r1
 80012e8:	43d2      	mvns	r2, r2
 80012ea:	401a      	ands	r2, r3
 80012ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	019b      	lsls	r3, r3, #6
 80012f2:	22ff      	movs	r2, #255	@ 0xff
 80012f4:	401a      	ands	r2, r3
 80012f6:	1dfb      	adds	r3, r7, #7
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	0018      	movs	r0, r3
 80012fc:	2303      	movs	r3, #3
 80012fe:	4003      	ands	r3, r0
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001304:	4809      	ldr	r0, [pc, #36]	@ (800132c <__NVIC_SetPriority+0xd8>)
 8001306:	1dfb      	adds	r3, r7, #7
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	001c      	movs	r4, r3
 800130c:	230f      	movs	r3, #15
 800130e:	4023      	ands	r3, r4
 8001310:	3b08      	subs	r3, #8
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	430a      	orrs	r2, r1
 8001316:	3306      	adds	r3, #6
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	18c3      	adds	r3, r0, r3
 800131c:	3304      	adds	r3, #4
 800131e:	601a      	str	r2, [r3, #0]
}
 8001320:	46c0      	nop			@ (mov r8, r8)
 8001322:	46bd      	mov	sp, r7
 8001324:	b003      	add	sp, #12
 8001326:	bd90      	pop	{r4, r7, pc}
 8001328:	e000e100 	.word	0xe000e100
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	1e5a      	subs	r2, r3, #1
 800133c:	2380      	movs	r3, #128	@ 0x80
 800133e:	045b      	lsls	r3, r3, #17
 8001340:	429a      	cmp	r2, r3
 8001342:	d301      	bcc.n	8001348 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001344:	2301      	movs	r3, #1
 8001346:	e010      	b.n	800136a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001348:	4b0a      	ldr	r3, [pc, #40]	@ (8001374 <SysTick_Config+0x44>)
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	3a01      	subs	r2, #1
 800134e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001350:	2301      	movs	r3, #1
 8001352:	425b      	negs	r3, r3
 8001354:	2103      	movs	r1, #3
 8001356:	0018      	movs	r0, r3
 8001358:	f7ff ff7c 	bl	8001254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800135c:	4b05      	ldr	r3, [pc, #20]	@ (8001374 <SysTick_Config+0x44>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001362:	4b04      	ldr	r3, [pc, #16]	@ (8001374 <SysTick_Config+0x44>)
 8001364:	2207      	movs	r2, #7
 8001366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001368:	2300      	movs	r3, #0
}
 800136a:	0018      	movs	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	b002      	add	sp, #8
 8001370:	bd80      	pop	{r7, pc}
 8001372:	46c0      	nop			@ (mov r8, r8)
 8001374:	e000e010 	.word	0xe000e010

08001378 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
 8001382:	210f      	movs	r1, #15
 8001384:	187b      	adds	r3, r7, r1
 8001386:	1c02      	adds	r2, r0, #0
 8001388:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	187b      	adds	r3, r7, r1
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b25b      	sxtb	r3, r3
 8001392:	0011      	movs	r1, r2
 8001394:	0018      	movs	r0, r3
 8001396:	f7ff ff5d 	bl	8001254 <__NVIC_SetPriority>
}
 800139a:	46c0      	nop			@ (mov r8, r8)
 800139c:	46bd      	mov	sp, r7
 800139e:	b004      	add	sp, #16
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	0018      	movs	r0, r3
 80013ae:	f7ff ffbf 	bl	8001330 <SysTick_Config>
 80013b2:	0003      	movs	r3, r0
}
 80013b4:	0018      	movs	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b002      	add	sp, #8
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80013d2:	e155      	b.n	8001680 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2101      	movs	r1, #1
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	4091      	lsls	r1, r2
 80013de:	000a      	movs	r2, r1
 80013e0:	4013      	ands	r3, r2
 80013e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d100      	bne.n	80013ec <HAL_GPIO_Init+0x30>
 80013ea:	e146      	b.n	800167a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2203      	movs	r2, #3
 80013f2:	4013      	ands	r3, r2
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d005      	beq.n	8001404 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2203      	movs	r2, #3
 80013fe:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001400:	2b02      	cmp	r3, #2
 8001402:	d130      	bne.n	8001466 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	2203      	movs	r2, #3
 8001410:	409a      	lsls	r2, r3
 8001412:	0013      	movs	r3, r2
 8001414:	43da      	mvns	r2, r3
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	68da      	ldr	r2, [r3, #12]
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	409a      	lsls	r2, r3
 8001426:	0013      	movs	r3, r2
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800143a:	2201      	movs	r2, #1
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	409a      	lsls	r2, r3
 8001440:	0013      	movs	r3, r2
 8001442:	43da      	mvns	r2, r3
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4013      	ands	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	091b      	lsrs	r3, r3, #4
 8001450:	2201      	movs	r2, #1
 8001452:	401a      	ands	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
 8001458:	0013      	movs	r3, r2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2203      	movs	r2, #3
 800146c:	4013      	ands	r3, r2
 800146e:	2b03      	cmp	r3, #3
 8001470:	d017      	beq.n	80014a2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	2203      	movs	r2, #3
 800147e:	409a      	lsls	r2, r3
 8001480:	0013      	movs	r3, r2
 8001482:	43da      	mvns	r2, r3
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	4013      	ands	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	409a      	lsls	r2, r3
 8001494:	0013      	movs	r3, r2
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2203      	movs	r2, #3
 80014a8:	4013      	ands	r3, r2
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d123      	bne.n	80014f6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	08da      	lsrs	r2, r3, #3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	3208      	adds	r2, #8
 80014b6:	0092      	lsls	r2, r2, #2
 80014b8:	58d3      	ldr	r3, [r2, r3]
 80014ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	2207      	movs	r2, #7
 80014c0:	4013      	ands	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	220f      	movs	r2, #15
 80014c6:	409a      	lsls	r2, r3
 80014c8:	0013      	movs	r3, r2
 80014ca:	43da      	mvns	r2, r3
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	691a      	ldr	r2, [r3, #16]
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	2107      	movs	r1, #7
 80014da:	400b      	ands	r3, r1
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	409a      	lsls	r2, r3
 80014e0:	0013      	movs	r3, r2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	08da      	lsrs	r2, r3, #3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3208      	adds	r2, #8
 80014f0:	0092      	lsls	r2, r2, #2
 80014f2:	6939      	ldr	r1, [r7, #16]
 80014f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	2203      	movs	r2, #3
 8001502:	409a      	lsls	r2, r3
 8001504:	0013      	movs	r3, r2
 8001506:	43da      	mvns	r2, r3
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	4013      	ands	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2203      	movs	r2, #3
 8001514:	401a      	ands	r2, r3
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	409a      	lsls	r2, r3
 800151c:	0013      	movs	r3, r2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	23c0      	movs	r3, #192	@ 0xc0
 8001530:	029b      	lsls	r3, r3, #10
 8001532:	4013      	ands	r3, r2
 8001534:	d100      	bne.n	8001538 <HAL_GPIO_Init+0x17c>
 8001536:	e0a0      	b.n	800167a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001538:	4b57      	ldr	r3, [pc, #348]	@ (8001698 <HAL_GPIO_Init+0x2dc>)
 800153a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800153c:	4b56      	ldr	r3, [pc, #344]	@ (8001698 <HAL_GPIO_Init+0x2dc>)
 800153e:	2101      	movs	r1, #1
 8001540:	430a      	orrs	r2, r1
 8001542:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001544:	4a55      	ldr	r2, [pc, #340]	@ (800169c <HAL_GPIO_Init+0x2e0>)
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	3302      	adds	r3, #2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	589b      	ldr	r3, [r3, r2]
 8001550:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	2203      	movs	r2, #3
 8001556:	4013      	ands	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	220f      	movs	r2, #15
 800155c:	409a      	lsls	r2, r3
 800155e:	0013      	movs	r3, r2
 8001560:	43da      	mvns	r2, r3
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	23a0      	movs	r3, #160	@ 0xa0
 800156c:	05db      	lsls	r3, r3, #23
 800156e:	429a      	cmp	r2, r3
 8001570:	d01f      	beq.n	80015b2 <HAL_GPIO_Init+0x1f6>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4a      	ldr	r2, [pc, #296]	@ (80016a0 <HAL_GPIO_Init+0x2e4>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d019      	beq.n	80015ae <HAL_GPIO_Init+0x1f2>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a49      	ldr	r2, [pc, #292]	@ (80016a4 <HAL_GPIO_Init+0x2e8>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d013      	beq.n	80015aa <HAL_GPIO_Init+0x1ee>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a48      	ldr	r2, [pc, #288]	@ (80016a8 <HAL_GPIO_Init+0x2ec>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d00d      	beq.n	80015a6 <HAL_GPIO_Init+0x1ea>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a47      	ldr	r2, [pc, #284]	@ (80016ac <HAL_GPIO_Init+0x2f0>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d007      	beq.n	80015a2 <HAL_GPIO_Init+0x1e6>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a46      	ldr	r2, [pc, #280]	@ (80016b0 <HAL_GPIO_Init+0x2f4>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d101      	bne.n	800159e <HAL_GPIO_Init+0x1e2>
 800159a:	2305      	movs	r3, #5
 800159c:	e00a      	b.n	80015b4 <HAL_GPIO_Init+0x1f8>
 800159e:	2306      	movs	r3, #6
 80015a0:	e008      	b.n	80015b4 <HAL_GPIO_Init+0x1f8>
 80015a2:	2304      	movs	r3, #4
 80015a4:	e006      	b.n	80015b4 <HAL_GPIO_Init+0x1f8>
 80015a6:	2303      	movs	r3, #3
 80015a8:	e004      	b.n	80015b4 <HAL_GPIO_Init+0x1f8>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e002      	b.n	80015b4 <HAL_GPIO_Init+0x1f8>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <HAL_GPIO_Init+0x1f8>
 80015b2:	2300      	movs	r3, #0
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	2103      	movs	r1, #3
 80015b8:	400a      	ands	r2, r1
 80015ba:	0092      	lsls	r2, r2, #2
 80015bc:	4093      	lsls	r3, r2
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015c4:	4935      	ldr	r1, [pc, #212]	@ (800169c <HAL_GPIO_Init+0x2e0>)
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	089b      	lsrs	r3, r3, #2
 80015ca:	3302      	adds	r3, #2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015d2:	4b38      	ldr	r3, [pc, #224]	@ (80016b4 <HAL_GPIO_Init+0x2f8>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	43da      	mvns	r2, r3
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	4013      	ands	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	2380      	movs	r3, #128	@ 0x80
 80015e8:	035b      	lsls	r3, r3, #13
 80015ea:	4013      	ands	r3, r2
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015f6:	4b2f      	ldr	r3, [pc, #188]	@ (80016b4 <HAL_GPIO_Init+0x2f8>)
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80015fc:	4b2d      	ldr	r3, [pc, #180]	@ (80016b4 <HAL_GPIO_Init+0x2f8>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	43da      	mvns	r2, r3
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	2380      	movs	r3, #128	@ 0x80
 8001612:	039b      	lsls	r3, r3, #14
 8001614:	4013      	ands	r3, r2
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001620:	4b24      	ldr	r3, [pc, #144]	@ (80016b4 <HAL_GPIO_Init+0x2f8>)
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001626:	4b23      	ldr	r3, [pc, #140]	@ (80016b4 <HAL_GPIO_Init+0x2f8>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	43da      	mvns	r2, r3
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	2380      	movs	r3, #128	@ 0x80
 800163c:	029b      	lsls	r3, r3, #10
 800163e:	4013      	ands	r3, r2
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800164a:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <HAL_GPIO_Init+0x2f8>)
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001650:	4b18      	ldr	r3, [pc, #96]	@ (80016b4 <HAL_GPIO_Init+0x2f8>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	43da      	mvns	r2, r3
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	2380      	movs	r3, #128	@ 0x80
 8001666:	025b      	lsls	r3, r3, #9
 8001668:	4013      	ands	r3, r2
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001674:	4b0f      	ldr	r3, [pc, #60]	@ (80016b4 <HAL_GPIO_Init+0x2f8>)
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	3301      	adds	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	40da      	lsrs	r2, r3
 8001688:	1e13      	subs	r3, r2, #0
 800168a:	d000      	beq.n	800168e <HAL_GPIO_Init+0x2d2>
 800168c:	e6a2      	b.n	80013d4 <HAL_GPIO_Init+0x18>
  }
}
 800168e:	46c0      	nop			@ (mov r8, r8)
 8001690:	46c0      	nop			@ (mov r8, r8)
 8001692:	46bd      	mov	sp, r7
 8001694:	b006      	add	sp, #24
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40021000 	.word	0x40021000
 800169c:	40010000 	.word	0x40010000
 80016a0:	50000400 	.word	0x50000400
 80016a4:	50000800 	.word	0x50000800
 80016a8:	50000c00 	.word	0x50000c00
 80016ac:	50001000 	.word	0x50001000
 80016b0:	50001c00 	.word	0x50001c00
 80016b4:	40010400 	.word	0x40010400

080016b8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	0008      	movs	r0, r1
 80016c2:	0011      	movs	r1, r2
 80016c4:	1cbb      	adds	r3, r7, #2
 80016c6:	1c02      	adds	r2, r0, #0
 80016c8:	801a      	strh	r2, [r3, #0]
 80016ca:	1c7b      	adds	r3, r7, #1
 80016cc:	1c0a      	adds	r2, r1, #0
 80016ce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016d0:	1c7b      	adds	r3, r7, #1
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d004      	beq.n	80016e2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016d8:	1cbb      	adds	r3, r7, #2
 80016da:	881a      	ldrh	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80016e0:	e003      	b.n	80016ea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80016e2:	1cbb      	adds	r3, r7, #2
 80016e4:	881a      	ldrh	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016ea:	46c0      	nop			@ (mov r8, r8)
 80016ec:	46bd      	mov	sp, r7
 80016ee:	b002      	add	sp, #8
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e082      	b.n	800180c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2241      	movs	r2, #65	@ 0x41
 800170a:	5c9b      	ldrb	r3, [r3, r2]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d107      	bne.n	8001722 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2240      	movs	r2, #64	@ 0x40
 8001716:	2100      	movs	r1, #0
 8001718:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	0018      	movs	r0, r3
 800171e:	f7ff f995 	bl	8000a4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2241      	movs	r2, #65	@ 0x41
 8001726:	2124      	movs	r1, #36	@ 0x24
 8001728:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2101      	movs	r1, #1
 8001736:	438a      	bics	r2, r1
 8001738:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4934      	ldr	r1, [pc, #208]	@ (8001814 <HAL_I2C_Init+0x120>)
 8001744:	400a      	ands	r2, r1
 8001746:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4931      	ldr	r1, [pc, #196]	@ (8001818 <HAL_I2C_Init+0x124>)
 8001754:	400a      	ands	r2, r1
 8001756:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d108      	bne.n	8001772 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2180      	movs	r1, #128	@ 0x80
 800176a:	0209      	lsls	r1, r1, #8
 800176c:	430a      	orrs	r2, r1
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	e007      	b.n	8001782 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2184      	movs	r1, #132	@ 0x84
 800177c:	0209      	lsls	r1, r1, #8
 800177e:	430a      	orrs	r2, r1
 8001780:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	2b02      	cmp	r3, #2
 8001788:	d104      	bne.n	8001794 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2280      	movs	r2, #128	@ 0x80
 8001790:	0112      	lsls	r2, r2, #4
 8001792:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	491f      	ldr	r1, [pc, #124]	@ (800181c <HAL_I2C_Init+0x128>)
 80017a0:	430a      	orrs	r2, r1
 80017a2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68da      	ldr	r2, [r3, #12]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	491a      	ldr	r1, [pc, #104]	@ (8001818 <HAL_I2C_Init+0x124>)
 80017b0:	400a      	ands	r2, r1
 80017b2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691a      	ldr	r2, [r3, #16]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	431a      	orrs	r2, r3
 80017be:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69d9      	ldr	r1, [r3, #28]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a1a      	ldr	r2, [r3, #32]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2101      	movs	r1, #1
 80017ea:	430a      	orrs	r2, r1
 80017ec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2241      	movs	r2, #65	@ 0x41
 80017f8:	2120      	movs	r1, #32
 80017fa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2242      	movs	r2, #66	@ 0x42
 8001806:	2100      	movs	r1, #0
 8001808:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	0018      	movs	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	b002      	add	sp, #8
 8001812:	bd80      	pop	{r7, pc}
 8001814:	f0ffffff 	.word	0xf0ffffff
 8001818:	ffff7fff 	.word	0xffff7fff
 800181c:	02008000 	.word	0x02008000

08001820 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2241      	movs	r2, #65	@ 0x41
 800182e:	5c9b      	ldrb	r3, [r3, r2]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b20      	cmp	r3, #32
 8001834:	d138      	bne.n	80018a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2240      	movs	r2, #64	@ 0x40
 800183a:	5c9b      	ldrb	r3, [r3, r2]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d101      	bne.n	8001844 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001840:	2302      	movs	r3, #2
 8001842:	e032      	b.n	80018aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2240      	movs	r2, #64	@ 0x40
 8001848:	2101      	movs	r1, #1
 800184a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2241      	movs	r2, #65	@ 0x41
 8001850:	2124      	movs	r1, #36	@ 0x24
 8001852:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2101      	movs	r1, #1
 8001860:	438a      	bics	r2, r1
 8001862:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4911      	ldr	r1, [pc, #68]	@ (80018b4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001870:	400a      	ands	r2, r1
 8001872:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6819      	ldr	r1, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2101      	movs	r1, #1
 8001890:	430a      	orrs	r2, r1
 8001892:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2241      	movs	r2, #65	@ 0x41
 8001898:	2120      	movs	r1, #32
 800189a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2240      	movs	r2, #64	@ 0x40
 80018a0:	2100      	movs	r1, #0
 80018a2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	e000      	b.n	80018aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80018a8:	2302      	movs	r3, #2
  }
}
 80018aa:	0018      	movs	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	b002      	add	sp, #8
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	46c0      	nop			@ (mov r8, r8)
 80018b4:	ffffefff 	.word	0xffffefff

080018b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2241      	movs	r2, #65	@ 0x41
 80018c6:	5c9b      	ldrb	r3, [r3, r2]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b20      	cmp	r3, #32
 80018cc:	d139      	bne.n	8001942 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2240      	movs	r2, #64	@ 0x40
 80018d2:	5c9b      	ldrb	r3, [r3, r2]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d101      	bne.n	80018dc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80018d8:	2302      	movs	r3, #2
 80018da:	e033      	b.n	8001944 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2240      	movs	r2, #64	@ 0x40
 80018e0:	2101      	movs	r1, #1
 80018e2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2241      	movs	r2, #65	@ 0x41
 80018e8:	2124      	movs	r1, #36	@ 0x24
 80018ea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2101      	movs	r1, #1
 80018f8:	438a      	bics	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4a11      	ldr	r2, [pc, #68]	@ (800194c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001908:	4013      	ands	r3, r2
 800190a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	021b      	lsls	r3, r3, #8
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	4313      	orrs	r3, r2
 8001914:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2101      	movs	r1, #1
 800192a:	430a      	orrs	r2, r1
 800192c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2241      	movs	r2, #65	@ 0x41
 8001932:	2120      	movs	r1, #32
 8001934:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2240      	movs	r2, #64	@ 0x40
 800193a:	2100      	movs	r1, #0
 800193c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800193e:	2300      	movs	r3, #0
 8001940:	e000      	b.n	8001944 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001942:	2302      	movs	r3, #2
  }
}
 8001944:	0018      	movs	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	b004      	add	sp, #16
 800194a:	bd80      	pop	{r7, pc}
 800194c:	fffff0ff 	.word	0xfffff0ff

08001950 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001952:	b08b      	sub	sp, #44	@ 0x2c
 8001954:	af06      	add	r7, sp, #24
 8001956:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e0f0      	b.n	8001b44 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a79      	ldr	r2, [pc, #484]	@ (8001b4c <HAL_PCD_Init+0x1fc>)
 8001966:	5c9b      	ldrb	r3, [r3, r2]
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d108      	bne.n	8001980 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	23aa      	movs	r3, #170	@ 0xaa
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	2100      	movs	r1, #0
 8001976:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	0018      	movs	r0, r3
 800197c:	f7ff f966 	bl	8000c4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a72      	ldr	r2, [pc, #456]	@ (8001b4c <HAL_PCD_Init+0x1fc>)
 8001984:	2103      	movs	r1, #3
 8001986:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	0018      	movs	r0, r3
 800198e:	f001 fe4f 	bl	8003630 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001992:	230f      	movs	r3, #15
 8001994:	18fb      	adds	r3, r7, r3
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
 800199a:	e049      	b.n	8001a30 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800199c:	200f      	movs	r0, #15
 800199e:	183b      	adds	r3, r7, r0
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	1c5a      	adds	r2, r3, #1
 80019a6:	0013      	movs	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	189b      	adds	r3, r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	18cb      	adds	r3, r1, r3
 80019b0:	3301      	adds	r3, #1
 80019b2:	2201      	movs	r2, #1
 80019b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019b6:	183b      	adds	r3, r7, r0
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	0013      	movs	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	189b      	adds	r3, r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	183a      	adds	r2, r7, r0
 80019c8:	7812      	ldrb	r2, [r2, #0]
 80019ca:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019cc:	183b      	adds	r3, r7, r0
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	0013      	movs	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	189b      	adds	r3, r3, r2
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	18cb      	adds	r3, r1, r3
 80019de:	3303      	adds	r3, #3
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019e4:	183b      	adds	r3, r7, r0
 80019e6:	781a      	ldrb	r2, [r3, #0]
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	0013      	movs	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	189b      	adds	r3, r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	18cb      	adds	r3, r1, r3
 80019f4:	3338      	adds	r3, #56	@ 0x38
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019fa:	183b      	adds	r3, r7, r0
 80019fc:	781a      	ldrb	r2, [r3, #0]
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	0013      	movs	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	189b      	adds	r3, r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	18cb      	adds	r3, r1, r3
 8001a0a:	333c      	adds	r3, #60	@ 0x3c
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a10:	183b      	adds	r3, r7, r0
 8001a12:	781a      	ldrb	r2, [r3, #0]
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	0013      	movs	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	189b      	adds	r3, r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	18cb      	adds	r3, r1, r3
 8001a20:	3340      	adds	r3, #64	@ 0x40
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a26:	183b      	adds	r3, r7, r0
 8001a28:	781a      	ldrb	r2, [r3, #0]
 8001a2a:	183b      	adds	r3, r7, r0
 8001a2c:	3201      	adds	r2, #1
 8001a2e:	701a      	strb	r2, [r3, #0]
 8001a30:	210f      	movs	r1, #15
 8001a32:	187b      	adds	r3, r7, r1
 8001a34:	781a      	ldrb	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d3ae      	bcc.n	800199c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a3e:	187b      	adds	r3, r7, r1
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
 8001a44:	e056      	b.n	8001af4 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a46:	240f      	movs	r4, #15
 8001a48:	193b      	adds	r3, r7, r4
 8001a4a:	781a      	ldrb	r2, [r3, #0]
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	236a      	movs	r3, #106	@ 0x6a
 8001a50:	33ff      	adds	r3, #255	@ 0xff
 8001a52:	0019      	movs	r1, r3
 8001a54:	0013      	movs	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	189b      	adds	r3, r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	18c3      	adds	r3, r0, r3
 8001a5e:	185b      	adds	r3, r3, r1
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a64:	193b      	adds	r3, r7, r4
 8001a66:	781a      	ldrb	r2, [r3, #0]
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	23b4      	movs	r3, #180	@ 0xb4
 8001a6c:	0059      	lsls	r1, r3, #1
 8001a6e:	0013      	movs	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	189b      	adds	r3, r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	18c3      	adds	r3, r0, r3
 8001a78:	185b      	adds	r3, r3, r1
 8001a7a:	193a      	adds	r2, r7, r4
 8001a7c:	7812      	ldrb	r2, [r2, #0]
 8001a7e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a80:	193b      	adds	r3, r7, r4
 8001a82:	781a      	ldrb	r2, [r3, #0]
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	236c      	movs	r3, #108	@ 0x6c
 8001a88:	33ff      	adds	r3, #255	@ 0xff
 8001a8a:	0019      	movs	r1, r3
 8001a8c:	0013      	movs	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	189b      	adds	r3, r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	18c3      	adds	r3, r0, r3
 8001a96:	185b      	adds	r3, r3, r1
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a9c:	193b      	adds	r3, r7, r4
 8001a9e:	781a      	ldrb	r2, [r3, #0]
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	23bc      	movs	r3, #188	@ 0xbc
 8001aa4:	0059      	lsls	r1, r3, #1
 8001aa6:	0013      	movs	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	189b      	adds	r3, r3, r2
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	18c3      	adds	r3, r0, r3
 8001ab0:	185b      	adds	r3, r3, r1
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ab6:	193b      	adds	r3, r7, r4
 8001ab8:	781a      	ldrb	r2, [r3, #0]
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	23be      	movs	r3, #190	@ 0xbe
 8001abe:	0059      	lsls	r1, r3, #1
 8001ac0:	0013      	movs	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	189b      	adds	r3, r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	18c3      	adds	r3, r0, r3
 8001aca:	185b      	adds	r3, r3, r1
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ad0:	193b      	adds	r3, r7, r4
 8001ad2:	781a      	ldrb	r2, [r3, #0]
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	23c0      	movs	r3, #192	@ 0xc0
 8001ad8:	0059      	lsls	r1, r3, #1
 8001ada:	0013      	movs	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	189b      	adds	r3, r3, r2
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	18c3      	adds	r3, r0, r3
 8001ae4:	185b      	adds	r3, r3, r1
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aea:	193b      	adds	r3, r7, r4
 8001aec:	781a      	ldrb	r2, [r3, #0]
 8001aee:	193b      	adds	r3, r7, r4
 8001af0:	3201      	adds	r2, #1
 8001af2:	701a      	strb	r2, [r3, #0]
 8001af4:	230f      	movs	r3, #15
 8001af6:	18fb      	adds	r3, r7, r3
 8001af8:	781a      	ldrb	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d3a1      	bcc.n	8001a46 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	466a      	mov	r2, sp
 8001b0a:	0011      	movs	r1, r2
 8001b0c:	001a      	movs	r2, r3
 8001b0e:	3210      	adds	r2, #16
 8001b10:	ca70      	ldmia	r2!, {r4, r5, r6}
 8001b12:	c170      	stmia	r1!, {r4, r5, r6}
 8001b14:	ca30      	ldmia	r2!, {r4, r5}
 8001b16:	c130      	stmia	r1!, {r4, r5}
 8001b18:	6859      	ldr	r1, [r3, #4]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	f001 fda1 	bl	8003664 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2224      	movs	r2, #36	@ 0x24
 8001b26:	2100      	movs	r1, #0
 8001b28:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a07      	ldr	r2, [pc, #28]	@ (8001b4c <HAL_PCD_Init+0x1fc>)
 8001b2e:	2101      	movs	r1, #1
 8001b30:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d103      	bne.n	8001b42 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f000 f807 	bl	8001b50 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	0018      	movs	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	b005      	add	sp, #20
 8001b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b4c:	000002a9 	.word	0x000002a9

08001b50 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	23ba      	movs	r3, #186	@ 0xba
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	2101      	movs	r1, #1
 8001b66:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	23b8      	movs	r3, #184	@ 0xb8
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	2100      	movs	r1, #0
 8001b70:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2254      	movs	r2, #84	@ 0x54
 8001b76:	5a9b      	ldrh	r3, [r3, r2]
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	b299      	uxth	r1, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2254      	movs	r2, #84	@ 0x54
 8001b84:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2254      	movs	r2, #84	@ 0x54
 8001b8a:	5a9b      	ldrh	r3, [r3, r2]
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	2202      	movs	r2, #2
 8001b90:	4313      	orrs	r3, r2
 8001b92:	b299      	uxth	r1, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2254      	movs	r2, #84	@ 0x54
 8001b98:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b004      	add	sp, #16
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba4:	b5b0      	push	{r4, r5, r7, lr}
 8001ba6:	b08a      	sub	sp, #40	@ 0x28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d102      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	f000 fbbf 	bl	8002336 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bb8:	4bc9      	ldr	r3, [pc, #804]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	220c      	movs	r2, #12
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bc2:	4bc7      	ldr	r3, [pc, #796]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	2380      	movs	r3, #128	@ 0x80
 8001bc8:	025b      	lsls	r3, r3, #9
 8001bca:	4013      	ands	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d100      	bne.n	8001bda <HAL_RCC_OscConfig+0x36>
 8001bd8:	e07e      	b.n	8001cd8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d007      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	2b0c      	cmp	r3, #12
 8001be4:	d112      	bne.n	8001c0c <HAL_RCC_OscConfig+0x68>
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	2380      	movs	r3, #128	@ 0x80
 8001bea:	025b      	lsls	r3, r3, #9
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d10d      	bne.n	8001c0c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf0:	4bbb      	ldr	r3, [pc, #748]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	2380      	movs	r3, #128	@ 0x80
 8001bf6:	029b      	lsls	r3, r3, #10
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d100      	bne.n	8001bfe <HAL_RCC_OscConfig+0x5a>
 8001bfc:	e06b      	b.n	8001cd6 <HAL_RCC_OscConfig+0x132>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d167      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	f000 fb95 	bl	8002336 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	2380      	movs	r3, #128	@ 0x80
 8001c12:	025b      	lsls	r3, r3, #9
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d107      	bne.n	8001c28 <HAL_RCC_OscConfig+0x84>
 8001c18:	4bb1      	ldr	r3, [pc, #708]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4bb0      	ldr	r3, [pc, #704]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001c1e:	2180      	movs	r1, #128	@ 0x80
 8001c20:	0249      	lsls	r1, r1, #9
 8001c22:	430a      	orrs	r2, r1
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	e027      	b.n	8001c78 <HAL_RCC_OscConfig+0xd4>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	23a0      	movs	r3, #160	@ 0xa0
 8001c2e:	02db      	lsls	r3, r3, #11
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d10e      	bne.n	8001c52 <HAL_RCC_OscConfig+0xae>
 8001c34:	4baa      	ldr	r3, [pc, #680]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4ba9      	ldr	r3, [pc, #676]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001c3a:	2180      	movs	r1, #128	@ 0x80
 8001c3c:	02c9      	lsls	r1, r1, #11
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	4ba7      	ldr	r3, [pc, #668]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	4ba6      	ldr	r3, [pc, #664]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001c48:	2180      	movs	r1, #128	@ 0x80
 8001c4a:	0249      	lsls	r1, r1, #9
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	e012      	b.n	8001c78 <HAL_RCC_OscConfig+0xd4>
 8001c52:	4ba3      	ldr	r3, [pc, #652]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	4ba2      	ldr	r3, [pc, #648]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001c58:	49a2      	ldr	r1, [pc, #648]	@ (8001ee4 <HAL_RCC_OscConfig+0x340>)
 8001c5a:	400a      	ands	r2, r1
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	4ba0      	ldr	r3, [pc, #640]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	2380      	movs	r3, #128	@ 0x80
 8001c64:	025b      	lsls	r3, r3, #9
 8001c66:	4013      	ands	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4b9c      	ldr	r3, [pc, #624]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b9b      	ldr	r3, [pc, #620]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001c72:	499d      	ldr	r1, [pc, #628]	@ (8001ee8 <HAL_RCC_OscConfig+0x344>)
 8001c74:	400a      	ands	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d015      	beq.n	8001cac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7ff f8aa 	bl	8000dd8 <HAL_GetTick>
 8001c84:	0003      	movs	r3, r0
 8001c86:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c88:	e009      	b.n	8001c9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c8a:	f7ff f8a5 	bl	8000dd8 <HAL_GetTick>
 8001c8e:	0002      	movs	r2, r0
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b64      	cmp	r3, #100	@ 0x64
 8001c96:	d902      	bls.n	8001c9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	f000 fb4c 	bl	8002336 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c9e:	4b90      	ldr	r3, [pc, #576]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	2380      	movs	r3, #128	@ 0x80
 8001ca4:	029b      	lsls	r3, r3, #10
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d0ef      	beq.n	8001c8a <HAL_RCC_OscConfig+0xe6>
 8001caa:	e015      	b.n	8001cd8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7ff f894 	bl	8000dd8 <HAL_GetTick>
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb6:	f7ff f88f 	bl	8000dd8 <HAL_GetTick>
 8001cba:	0002      	movs	r2, r0
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b64      	cmp	r3, #100	@ 0x64
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e336      	b.n	8002336 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cc8:	4b85      	ldr	r3, [pc, #532]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	2380      	movs	r3, #128	@ 0x80
 8001cce:	029b      	lsls	r3, r3, #10
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d1f0      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x112>
 8001cd4:	e000      	b.n	8001cd8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2202      	movs	r2, #2
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d100      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x140>
 8001ce2:	e099      	b.n	8001e18 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cec:	2220      	movs	r2, #32
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d009      	beq.n	8001d06 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001cf2:	4b7b      	ldr	r3, [pc, #492]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	4b7a      	ldr	r3, [pc, #488]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001cf8:	2120      	movs	r1, #32
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d00:	2220      	movs	r2, #32
 8001d02:	4393      	bics	r3, r2
 8001d04:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d005      	beq.n	8001d18 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	2b0c      	cmp	r3, #12
 8001d10:	d13e      	bne.n	8001d90 <HAL_RCC_OscConfig+0x1ec>
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d13b      	bne.n	8001d90 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001d18:	4b71      	ldr	r3, [pc, #452]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2204      	movs	r2, #4
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d004      	beq.n	8001d2c <HAL_RCC_OscConfig+0x188>
 8001d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e304      	b.n	8002336 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2c:	4b6c      	ldr	r3, [pc, #432]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	4a6e      	ldr	r2, [pc, #440]	@ (8001eec <HAL_RCC_OscConfig+0x348>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	0019      	movs	r1, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	021a      	lsls	r2, r3, #8
 8001d3c:	4b68      	ldr	r3, [pc, #416]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001d42:	4b67      	ldr	r3, [pc, #412]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2209      	movs	r2, #9
 8001d48:	4393      	bics	r3, r2
 8001d4a:	0019      	movs	r1, r3
 8001d4c:	4b64      	ldr	r3, [pc, #400]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d50:	430a      	orrs	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d54:	f000 fc42 	bl	80025dc <HAL_RCC_GetSysClockFreq>
 8001d58:	0001      	movs	r1, r0
 8001d5a:	4b61      	ldr	r3, [pc, #388]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	091b      	lsrs	r3, r3, #4
 8001d60:	220f      	movs	r2, #15
 8001d62:	4013      	ands	r3, r2
 8001d64:	4a62      	ldr	r2, [pc, #392]	@ (8001ef0 <HAL_RCC_OscConfig+0x34c>)
 8001d66:	5cd3      	ldrb	r3, [r2, r3]
 8001d68:	000a      	movs	r2, r1
 8001d6a:	40da      	lsrs	r2, r3
 8001d6c:	4b61      	ldr	r3, [pc, #388]	@ (8001ef4 <HAL_RCC_OscConfig+0x350>)
 8001d6e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001d70:	4b61      	ldr	r3, [pc, #388]	@ (8001ef8 <HAL_RCC_OscConfig+0x354>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2513      	movs	r5, #19
 8001d76:	197c      	adds	r4, r7, r5
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f7fe ffe7 	bl	8000d4c <HAL_InitTick>
 8001d7e:	0003      	movs	r3, r0
 8001d80:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001d82:	197b      	adds	r3, r7, r5
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d046      	beq.n	8001e18 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001d8a:	197b      	adds	r3, r7, r5
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	e2d2      	b.n	8002336 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d027      	beq.n	8001de6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001d96:	4b52      	ldr	r3, [pc, #328]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2209      	movs	r2, #9
 8001d9c:	4393      	bics	r3, r2
 8001d9e:	0019      	movs	r1, r3
 8001da0:	4b4f      	ldr	r3, [pc, #316]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001da4:	430a      	orrs	r2, r1
 8001da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7ff f816 	bl	8000dd8 <HAL_GetTick>
 8001dac:	0003      	movs	r3, r0
 8001dae:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001db2:	f7ff f811 	bl	8000dd8 <HAL_GetTick>
 8001db6:	0002      	movs	r2, r0
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e2b8      	b.n	8002336 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dc4:	4b46      	ldr	r3, [pc, #280]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2204      	movs	r2, #4
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d0f1      	beq.n	8001db2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dce:	4b44      	ldr	r3, [pc, #272]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	4a46      	ldr	r2, [pc, #280]	@ (8001eec <HAL_RCC_OscConfig+0x348>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	0019      	movs	r1, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	021a      	lsls	r2, r3, #8
 8001dde:	4b40      	ldr	r3, [pc, #256]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001de0:	430a      	orrs	r2, r1
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	e018      	b.n	8001e18 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001de6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	4b3d      	ldr	r3, [pc, #244]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001dec:	2101      	movs	r1, #1
 8001dee:	438a      	bics	r2, r1
 8001df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df2:	f7fe fff1 	bl	8000dd8 <HAL_GetTick>
 8001df6:	0003      	movs	r3, r0
 8001df8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dfc:	f7fe ffec 	bl	8000dd8 <HAL_GetTick>
 8001e00:	0002      	movs	r2, r0
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e293      	b.n	8002336 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e0e:	4b34      	ldr	r3, [pc, #208]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2204      	movs	r2, #4
 8001e14:	4013      	ands	r3, r2
 8001e16:	d1f1      	bne.n	8001dfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2210      	movs	r2, #16
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d100      	bne.n	8001e24 <HAL_RCC_OscConfig+0x280>
 8001e22:	e0a2      	b.n	8001f6a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d140      	bne.n	8001eac <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e2a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	2380      	movs	r3, #128	@ 0x80
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4013      	ands	r3, r2
 8001e34:	d005      	beq.n	8001e42 <HAL_RCC_OscConfig+0x29e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e279      	b.n	8002336 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e42:	4b27      	ldr	r3, [pc, #156]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	4a2d      	ldr	r2, [pc, #180]	@ (8001efc <HAL_RCC_OscConfig+0x358>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	0019      	movs	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e50:	4b23      	ldr	r3, [pc, #140]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001e52:	430a      	orrs	r2, r1
 8001e54:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e56:	4b22      	ldr	r3, [pc, #136]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	021b      	lsls	r3, r3, #8
 8001e5c:	0a19      	lsrs	r1, r3, #8
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	061a      	lsls	r2, r3, #24
 8001e64:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001e66:	430a      	orrs	r2, r1
 8001e68:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6e:	0b5b      	lsrs	r3, r3, #13
 8001e70:	3301      	adds	r3, #1
 8001e72:	2280      	movs	r2, #128	@ 0x80
 8001e74:	0212      	lsls	r2, r2, #8
 8001e76:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001e78:	4b19      	ldr	r3, [pc, #100]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	091b      	lsrs	r3, r3, #4
 8001e7e:	210f      	movs	r1, #15
 8001e80:	400b      	ands	r3, r1
 8001e82:	491b      	ldr	r1, [pc, #108]	@ (8001ef0 <HAL_RCC_OscConfig+0x34c>)
 8001e84:	5ccb      	ldrb	r3, [r1, r3]
 8001e86:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001e88:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef4 <HAL_RCC_OscConfig+0x350>)
 8001e8a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef8 <HAL_RCC_OscConfig+0x354>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2513      	movs	r5, #19
 8001e92:	197c      	adds	r4, r7, r5
 8001e94:	0018      	movs	r0, r3
 8001e96:	f7fe ff59 	bl	8000d4c <HAL_InitTick>
 8001e9a:	0003      	movs	r3, r0
 8001e9c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001e9e:	197b      	adds	r3, r7, r5
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d061      	beq.n	8001f6a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001ea6:	197b      	adds	r3, r7, r5
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	e244      	b.n	8002336 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d040      	beq.n	8001f36 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b09      	ldr	r3, [pc, #36]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001eba:	2180      	movs	r1, #128	@ 0x80
 8001ebc:	0049      	lsls	r1, r1, #1
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec2:	f7fe ff89 	bl	8000dd8 <HAL_GetTick>
 8001ec6:	0003      	movs	r3, r0
 8001ec8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001eca:	e019      	b.n	8001f00 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ecc:	f7fe ff84 	bl	8000dd8 <HAL_GetTick>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d912      	bls.n	8001f00 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e22b      	b.n	8002336 <HAL_RCC_OscConfig+0x792>
 8001ede:	46c0      	nop			@ (mov r8, r8)
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	fffeffff 	.word	0xfffeffff
 8001ee8:	fffbffff 	.word	0xfffbffff
 8001eec:	ffffe0ff 	.word	0xffffe0ff
 8001ef0:	08003724 	.word	0x08003724
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	20000004 	.word	0x20000004
 8001efc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f00:	4bca      	ldr	r3, [pc, #808]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	2380      	movs	r3, #128	@ 0x80
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d0df      	beq.n	8001ecc <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f0c:	4bc7      	ldr	r3, [pc, #796]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	4ac7      	ldr	r2, [pc, #796]	@ (8002230 <HAL_RCC_OscConfig+0x68c>)
 8001f12:	4013      	ands	r3, r2
 8001f14:	0019      	movs	r1, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f1a:	4bc4      	ldr	r3, [pc, #784]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f20:	4bc2      	ldr	r3, [pc, #776]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	021b      	lsls	r3, r3, #8
 8001f26:	0a19      	lsrs	r1, r3, #8
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	061a      	lsls	r2, r3, #24
 8001f2e:	4bbf      	ldr	r3, [pc, #764]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 8001f30:	430a      	orrs	r2, r1
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	e019      	b.n	8001f6a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f36:	4bbd      	ldr	r3, [pc, #756]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	4bbc      	ldr	r3, [pc, #752]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 8001f3c:	49bd      	ldr	r1, [pc, #756]	@ (8002234 <HAL_RCC_OscConfig+0x690>)
 8001f3e:	400a      	ands	r2, r1
 8001f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f42:	f7fe ff49 	bl	8000dd8 <HAL_GetTick>
 8001f46:	0003      	movs	r3, r0
 8001f48:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f4c:	f7fe ff44 	bl	8000dd8 <HAL_GetTick>
 8001f50:	0002      	movs	r2, r0
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e1eb      	b.n	8002336 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001f5e:	4bb3      	ldr	r3, [pc, #716]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	2380      	movs	r3, #128	@ 0x80
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4013      	ands	r3, r2
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2208      	movs	r2, #8
 8001f70:	4013      	ands	r3, r2
 8001f72:	d036      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d019      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f7c:	4bab      	ldr	r3, [pc, #684]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 8001f7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f80:	4baa      	ldr	r3, [pc, #680]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 8001f82:	2101      	movs	r1, #1
 8001f84:	430a      	orrs	r2, r1
 8001f86:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f88:	f7fe ff26 	bl	8000dd8 <HAL_GetTick>
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f92:	f7fe ff21 	bl	8000dd8 <HAL_GetTick>
 8001f96:	0002      	movs	r2, r0
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e1c8      	b.n	8002336 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fa4:	4ba1      	ldr	r3, [pc, #644]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 8001fa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fa8:	2202      	movs	r2, #2
 8001faa:	4013      	ands	r3, r2
 8001fac:	d0f1      	beq.n	8001f92 <HAL_RCC_OscConfig+0x3ee>
 8001fae:	e018      	b.n	8001fe2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fb0:	4b9e      	ldr	r3, [pc, #632]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 8001fb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001fb4:	4b9d      	ldr	r3, [pc, #628]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	438a      	bics	r2, r1
 8001fba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fbc:	f7fe ff0c 	bl	8000dd8 <HAL_GetTick>
 8001fc0:	0003      	movs	r3, r0
 8001fc2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc6:	f7fe ff07 	bl	8000dd8 <HAL_GetTick>
 8001fca:	0002      	movs	r2, r0
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e1ae      	b.n	8002336 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fd8:	4b94      	ldr	r3, [pc, #592]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 8001fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fdc:	2202      	movs	r2, #2
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d1f1      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2204      	movs	r2, #4
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d100      	bne.n	8001fee <HAL_RCC_OscConfig+0x44a>
 8001fec:	e0ae      	b.n	800214c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fee:	2023      	movs	r0, #35	@ 0x23
 8001ff0:	183b      	adds	r3, r7, r0
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ff6:	4b8d      	ldr	r3, [pc, #564]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 8001ff8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ffa:	2380      	movs	r3, #128	@ 0x80
 8001ffc:	055b      	lsls	r3, r3, #21
 8001ffe:	4013      	ands	r3, r2
 8002000:	d109      	bne.n	8002016 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002002:	4b8a      	ldr	r3, [pc, #552]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 8002004:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002006:	4b89      	ldr	r3, [pc, #548]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 8002008:	2180      	movs	r1, #128	@ 0x80
 800200a:	0549      	lsls	r1, r1, #21
 800200c:	430a      	orrs	r2, r1
 800200e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002010:	183b      	adds	r3, r7, r0
 8002012:	2201      	movs	r2, #1
 8002014:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002016:	4b88      	ldr	r3, [pc, #544]	@ (8002238 <HAL_RCC_OscConfig+0x694>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	2380      	movs	r3, #128	@ 0x80
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	4013      	ands	r3, r2
 8002020:	d11a      	bne.n	8002058 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002022:	4b85      	ldr	r3, [pc, #532]	@ (8002238 <HAL_RCC_OscConfig+0x694>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	4b84      	ldr	r3, [pc, #528]	@ (8002238 <HAL_RCC_OscConfig+0x694>)
 8002028:	2180      	movs	r1, #128	@ 0x80
 800202a:	0049      	lsls	r1, r1, #1
 800202c:	430a      	orrs	r2, r1
 800202e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002030:	f7fe fed2 	bl	8000dd8 <HAL_GetTick>
 8002034:	0003      	movs	r3, r0
 8002036:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800203a:	f7fe fecd 	bl	8000dd8 <HAL_GetTick>
 800203e:	0002      	movs	r2, r0
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b64      	cmp	r3, #100	@ 0x64
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e174      	b.n	8002336 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204c:	4b7a      	ldr	r3, [pc, #488]	@ (8002238 <HAL_RCC_OscConfig+0x694>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	2380      	movs	r3, #128	@ 0x80
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4013      	ands	r3, r2
 8002056:	d0f0      	beq.n	800203a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	2380      	movs	r3, #128	@ 0x80
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	429a      	cmp	r2, r3
 8002062:	d107      	bne.n	8002074 <HAL_RCC_OscConfig+0x4d0>
 8002064:	4b71      	ldr	r3, [pc, #452]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 8002066:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002068:	4b70      	ldr	r3, [pc, #448]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 800206a:	2180      	movs	r1, #128	@ 0x80
 800206c:	0049      	lsls	r1, r1, #1
 800206e:	430a      	orrs	r2, r1
 8002070:	651a      	str	r2, [r3, #80]	@ 0x50
 8002072:	e031      	b.n	80020d8 <HAL_RCC_OscConfig+0x534>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10c      	bne.n	8002096 <HAL_RCC_OscConfig+0x4f2>
 800207c:	4b6b      	ldr	r3, [pc, #428]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 800207e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002080:	4b6a      	ldr	r3, [pc, #424]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 8002082:	496c      	ldr	r1, [pc, #432]	@ (8002234 <HAL_RCC_OscConfig+0x690>)
 8002084:	400a      	ands	r2, r1
 8002086:	651a      	str	r2, [r3, #80]	@ 0x50
 8002088:	4b68      	ldr	r3, [pc, #416]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 800208a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800208c:	4b67      	ldr	r3, [pc, #412]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 800208e:	496b      	ldr	r1, [pc, #428]	@ (800223c <HAL_RCC_OscConfig+0x698>)
 8002090:	400a      	ands	r2, r1
 8002092:	651a      	str	r2, [r3, #80]	@ 0x50
 8002094:	e020      	b.n	80020d8 <HAL_RCC_OscConfig+0x534>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	23a0      	movs	r3, #160	@ 0xa0
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	429a      	cmp	r2, r3
 80020a0:	d10e      	bne.n	80020c0 <HAL_RCC_OscConfig+0x51c>
 80020a2:	4b62      	ldr	r3, [pc, #392]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 80020a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020a6:	4b61      	ldr	r3, [pc, #388]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 80020a8:	2180      	movs	r1, #128	@ 0x80
 80020aa:	00c9      	lsls	r1, r1, #3
 80020ac:	430a      	orrs	r2, r1
 80020ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80020b0:	4b5e      	ldr	r3, [pc, #376]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 80020b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020b4:	4b5d      	ldr	r3, [pc, #372]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 80020b6:	2180      	movs	r1, #128	@ 0x80
 80020b8:	0049      	lsls	r1, r1, #1
 80020ba:	430a      	orrs	r2, r1
 80020bc:	651a      	str	r2, [r3, #80]	@ 0x50
 80020be:	e00b      	b.n	80020d8 <HAL_RCC_OscConfig+0x534>
 80020c0:	4b5a      	ldr	r3, [pc, #360]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 80020c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020c4:	4b59      	ldr	r3, [pc, #356]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 80020c6:	495b      	ldr	r1, [pc, #364]	@ (8002234 <HAL_RCC_OscConfig+0x690>)
 80020c8:	400a      	ands	r2, r1
 80020ca:	651a      	str	r2, [r3, #80]	@ 0x50
 80020cc:	4b57      	ldr	r3, [pc, #348]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 80020ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020d0:	4b56      	ldr	r3, [pc, #344]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 80020d2:	495a      	ldr	r1, [pc, #360]	@ (800223c <HAL_RCC_OscConfig+0x698>)
 80020d4:	400a      	ands	r2, r1
 80020d6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d015      	beq.n	800210c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e0:	f7fe fe7a 	bl	8000dd8 <HAL_GetTick>
 80020e4:	0003      	movs	r3, r0
 80020e6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020e8:	e009      	b.n	80020fe <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ea:	f7fe fe75 	bl	8000dd8 <HAL_GetTick>
 80020ee:	0002      	movs	r2, r0
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	4a52      	ldr	r2, [pc, #328]	@ (8002240 <HAL_RCC_OscConfig+0x69c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e11b      	b.n	8002336 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020fe:	4b4b      	ldr	r3, [pc, #300]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 8002100:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002102:	2380      	movs	r3, #128	@ 0x80
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4013      	ands	r3, r2
 8002108:	d0ef      	beq.n	80020ea <HAL_RCC_OscConfig+0x546>
 800210a:	e014      	b.n	8002136 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800210c:	f7fe fe64 	bl	8000dd8 <HAL_GetTick>
 8002110:	0003      	movs	r3, r0
 8002112:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002114:	e009      	b.n	800212a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002116:	f7fe fe5f 	bl	8000dd8 <HAL_GetTick>
 800211a:	0002      	movs	r2, r0
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	4a47      	ldr	r2, [pc, #284]	@ (8002240 <HAL_RCC_OscConfig+0x69c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e105      	b.n	8002336 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800212a:	4b40      	ldr	r3, [pc, #256]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 800212c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800212e:	2380      	movs	r3, #128	@ 0x80
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4013      	ands	r3, r2
 8002134:	d1ef      	bne.n	8002116 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002136:	2323      	movs	r3, #35	@ 0x23
 8002138:	18fb      	adds	r3, r7, r3
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d105      	bne.n	800214c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002140:	4b3a      	ldr	r3, [pc, #232]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 8002142:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002144:	4b39      	ldr	r3, [pc, #228]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 8002146:	493f      	ldr	r1, [pc, #252]	@ (8002244 <HAL_RCC_OscConfig+0x6a0>)
 8002148:	400a      	ands	r2, r1
 800214a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2220      	movs	r2, #32
 8002152:	4013      	ands	r3, r2
 8002154:	d049      	beq.n	80021ea <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d026      	beq.n	80021ac <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800215e:	4b33      	ldr	r3, [pc, #204]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	4b32      	ldr	r3, [pc, #200]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 8002164:	2101      	movs	r1, #1
 8002166:	430a      	orrs	r2, r1
 8002168:	609a      	str	r2, [r3, #8]
 800216a:	4b30      	ldr	r3, [pc, #192]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 800216c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800216e:	4b2f      	ldr	r3, [pc, #188]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 8002170:	2101      	movs	r1, #1
 8002172:	430a      	orrs	r2, r1
 8002174:	635a      	str	r2, [r3, #52]	@ 0x34
 8002176:	4b34      	ldr	r3, [pc, #208]	@ (8002248 <HAL_RCC_OscConfig+0x6a4>)
 8002178:	6a1a      	ldr	r2, [r3, #32]
 800217a:	4b33      	ldr	r3, [pc, #204]	@ (8002248 <HAL_RCC_OscConfig+0x6a4>)
 800217c:	2180      	movs	r1, #128	@ 0x80
 800217e:	0189      	lsls	r1, r1, #6
 8002180:	430a      	orrs	r2, r1
 8002182:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7fe fe28 	bl	8000dd8 <HAL_GetTick>
 8002188:	0003      	movs	r3, r0
 800218a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800218e:	f7fe fe23 	bl	8000dd8 <HAL_GetTick>
 8002192:	0002      	movs	r2, r0
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e0ca      	b.n	8002336 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021a0:	4b22      	ldr	r3, [pc, #136]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2202      	movs	r2, #2
 80021a6:	4013      	ands	r3, r2
 80021a8:	d0f1      	beq.n	800218e <HAL_RCC_OscConfig+0x5ea>
 80021aa:	e01e      	b.n	80021ea <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80021ac:	4b1f      	ldr	r3, [pc, #124]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	4b1e      	ldr	r3, [pc, #120]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 80021b2:	2101      	movs	r1, #1
 80021b4:	438a      	bics	r2, r1
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	4b23      	ldr	r3, [pc, #140]	@ (8002248 <HAL_RCC_OscConfig+0x6a4>)
 80021ba:	6a1a      	ldr	r2, [r3, #32]
 80021bc:	4b22      	ldr	r3, [pc, #136]	@ (8002248 <HAL_RCC_OscConfig+0x6a4>)
 80021be:	4923      	ldr	r1, [pc, #140]	@ (800224c <HAL_RCC_OscConfig+0x6a8>)
 80021c0:	400a      	ands	r2, r1
 80021c2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7fe fe08 	bl	8000dd8 <HAL_GetTick>
 80021c8:	0003      	movs	r3, r0
 80021ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021ce:	f7fe fe03 	bl	8000dd8 <HAL_GetTick>
 80021d2:	0002      	movs	r2, r0
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e0aa      	b.n	8002336 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021e0:	4b12      	ldr	r3, [pc, #72]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	2202      	movs	r2, #2
 80021e6:	4013      	ands	r3, r2
 80021e8:	d1f1      	bne.n	80021ce <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d100      	bne.n	80021f4 <HAL_RCC_OscConfig+0x650>
 80021f2:	e09f      	b.n	8002334 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	2b0c      	cmp	r3, #12
 80021f8:	d100      	bne.n	80021fc <HAL_RCC_OscConfig+0x658>
 80021fa:	e078      	b.n	80022ee <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002200:	2b02      	cmp	r3, #2
 8002202:	d159      	bne.n	80022b8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002204:	4b09      	ldr	r3, [pc, #36]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b08      	ldr	r3, [pc, #32]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 800220a:	4911      	ldr	r1, [pc, #68]	@ (8002250 <HAL_RCC_OscConfig+0x6ac>)
 800220c:	400a      	ands	r2, r1
 800220e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7fe fde2 	bl	8000dd8 <HAL_GetTick>
 8002214:	0003      	movs	r3, r0
 8002216:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002218:	e01c      	b.n	8002254 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800221a:	f7fe fddd 	bl	8000dd8 <HAL_GetTick>
 800221e:	0002      	movs	r2, r0
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d915      	bls.n	8002254 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e084      	b.n	8002336 <HAL_RCC_OscConfig+0x792>
 800222c:	40021000 	.word	0x40021000
 8002230:	ffff1fff 	.word	0xffff1fff
 8002234:	fffffeff 	.word	0xfffffeff
 8002238:	40007000 	.word	0x40007000
 800223c:	fffffbff 	.word	0xfffffbff
 8002240:	00001388 	.word	0x00001388
 8002244:	efffffff 	.word	0xefffffff
 8002248:	40010000 	.word	0x40010000
 800224c:	ffffdfff 	.word	0xffffdfff
 8002250:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002254:	4b3a      	ldr	r3, [pc, #232]	@ (8002340 <HAL_RCC_OscConfig+0x79c>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	2380      	movs	r3, #128	@ 0x80
 800225a:	049b      	lsls	r3, r3, #18
 800225c:	4013      	ands	r3, r2
 800225e:	d1dc      	bne.n	800221a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002260:	4b37      	ldr	r3, [pc, #220]	@ (8002340 <HAL_RCC_OscConfig+0x79c>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	4a37      	ldr	r2, [pc, #220]	@ (8002344 <HAL_RCC_OscConfig+0x7a0>)
 8002266:	4013      	ands	r3, r2
 8002268:	0019      	movs	r1, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002278:	431a      	orrs	r2, r3
 800227a:	4b31      	ldr	r3, [pc, #196]	@ (8002340 <HAL_RCC_OscConfig+0x79c>)
 800227c:	430a      	orrs	r2, r1
 800227e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002280:	4b2f      	ldr	r3, [pc, #188]	@ (8002340 <HAL_RCC_OscConfig+0x79c>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b2e      	ldr	r3, [pc, #184]	@ (8002340 <HAL_RCC_OscConfig+0x79c>)
 8002286:	2180      	movs	r1, #128	@ 0x80
 8002288:	0449      	lsls	r1, r1, #17
 800228a:	430a      	orrs	r2, r1
 800228c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228e:	f7fe fda3 	bl	8000dd8 <HAL_GetTick>
 8002292:	0003      	movs	r3, r0
 8002294:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002298:	f7fe fd9e 	bl	8000dd8 <HAL_GetTick>
 800229c:	0002      	movs	r2, r0
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e045      	b.n	8002336 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80022aa:	4b25      	ldr	r3, [pc, #148]	@ (8002340 <HAL_RCC_OscConfig+0x79c>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	2380      	movs	r3, #128	@ 0x80
 80022b0:	049b      	lsls	r3, r3, #18
 80022b2:	4013      	ands	r3, r2
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0x6f4>
 80022b6:	e03d      	b.n	8002334 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b8:	4b21      	ldr	r3, [pc, #132]	@ (8002340 <HAL_RCC_OscConfig+0x79c>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4b20      	ldr	r3, [pc, #128]	@ (8002340 <HAL_RCC_OscConfig+0x79c>)
 80022be:	4922      	ldr	r1, [pc, #136]	@ (8002348 <HAL_RCC_OscConfig+0x7a4>)
 80022c0:	400a      	ands	r2, r1
 80022c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c4:	f7fe fd88 	bl	8000dd8 <HAL_GetTick>
 80022c8:	0003      	movs	r3, r0
 80022ca:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ce:	f7fe fd83 	bl	8000dd8 <HAL_GetTick>
 80022d2:	0002      	movs	r2, r0
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e02a      	b.n	8002336 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80022e0:	4b17      	ldr	r3, [pc, #92]	@ (8002340 <HAL_RCC_OscConfig+0x79c>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	2380      	movs	r3, #128	@ 0x80
 80022e6:	049b      	lsls	r3, r3, #18
 80022e8:	4013      	ands	r3, r2
 80022ea:	d1f0      	bne.n	80022ce <HAL_RCC_OscConfig+0x72a>
 80022ec:	e022      	b.n	8002334 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e01d      	b.n	8002336 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022fa:	4b11      	ldr	r3, [pc, #68]	@ (8002340 <HAL_RCC_OscConfig+0x79c>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	2380      	movs	r3, #128	@ 0x80
 8002304:	025b      	lsls	r3, r3, #9
 8002306:	401a      	ands	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230c:	429a      	cmp	r2, r3
 800230e:	d10f      	bne.n	8002330 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	23f0      	movs	r3, #240	@ 0xf0
 8002314:	039b      	lsls	r3, r3, #14
 8002316:	401a      	ands	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800231c:	429a      	cmp	r2, r3
 800231e:	d107      	bne.n	8002330 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	23c0      	movs	r3, #192	@ 0xc0
 8002324:	041b      	lsls	r3, r3, #16
 8002326:	401a      	ands	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e000      	b.n	8002336 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	0018      	movs	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	b00a      	add	sp, #40	@ 0x28
 800233c:	bdb0      	pop	{r4, r5, r7, pc}
 800233e:	46c0      	nop			@ (mov r8, r8)
 8002340:	40021000 	.word	0x40021000
 8002344:	ff02ffff 	.word	0xff02ffff
 8002348:	feffffff 	.word	0xfeffffff

0800234c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800234c:	b5b0      	push	{r4, r5, r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e128      	b.n	80025b2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002360:	4b96      	ldr	r3, [pc, #600]	@ (80025bc <HAL_RCC_ClockConfig+0x270>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2201      	movs	r2, #1
 8002366:	4013      	ands	r3, r2
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d91e      	bls.n	80023ac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236e:	4b93      	ldr	r3, [pc, #588]	@ (80025bc <HAL_RCC_ClockConfig+0x270>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2201      	movs	r2, #1
 8002374:	4393      	bics	r3, r2
 8002376:	0019      	movs	r1, r3
 8002378:	4b90      	ldr	r3, [pc, #576]	@ (80025bc <HAL_RCC_ClockConfig+0x270>)
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002380:	f7fe fd2a 	bl	8000dd8 <HAL_GetTick>
 8002384:	0003      	movs	r3, r0
 8002386:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002388:	e009      	b.n	800239e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800238a:	f7fe fd25 	bl	8000dd8 <HAL_GetTick>
 800238e:	0002      	movs	r2, r0
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	4a8a      	ldr	r2, [pc, #552]	@ (80025c0 <HAL_RCC_ClockConfig+0x274>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d901      	bls.n	800239e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e109      	b.n	80025b2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800239e:	4b87      	ldr	r3, [pc, #540]	@ (80025bc <HAL_RCC_ClockConfig+0x270>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2201      	movs	r2, #1
 80023a4:	4013      	ands	r3, r2
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d1ee      	bne.n	800238a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2202      	movs	r2, #2
 80023b2:	4013      	ands	r3, r2
 80023b4:	d009      	beq.n	80023ca <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b6:	4b83      	ldr	r3, [pc, #524]	@ (80025c4 <HAL_RCC_ClockConfig+0x278>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	22f0      	movs	r2, #240	@ 0xf0
 80023bc:	4393      	bics	r3, r2
 80023be:	0019      	movs	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	4b7f      	ldr	r3, [pc, #508]	@ (80025c4 <HAL_RCC_ClockConfig+0x278>)
 80023c6:	430a      	orrs	r2, r1
 80023c8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2201      	movs	r2, #1
 80023d0:	4013      	ands	r3, r2
 80023d2:	d100      	bne.n	80023d6 <HAL_RCC_ClockConfig+0x8a>
 80023d4:	e089      	b.n	80024ea <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d107      	bne.n	80023ee <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023de:	4b79      	ldr	r3, [pc, #484]	@ (80025c4 <HAL_RCC_ClockConfig+0x278>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	2380      	movs	r3, #128	@ 0x80
 80023e4:	029b      	lsls	r3, r3, #10
 80023e6:	4013      	ands	r3, r2
 80023e8:	d120      	bne.n	800242c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e0e1      	b.n	80025b2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d107      	bne.n	8002406 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023f6:	4b73      	ldr	r3, [pc, #460]	@ (80025c4 <HAL_RCC_ClockConfig+0x278>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	2380      	movs	r3, #128	@ 0x80
 80023fc:	049b      	lsls	r3, r3, #18
 80023fe:	4013      	ands	r3, r2
 8002400:	d114      	bne.n	800242c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e0d5      	b.n	80025b2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d106      	bne.n	800241c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800240e:	4b6d      	ldr	r3, [pc, #436]	@ (80025c4 <HAL_RCC_ClockConfig+0x278>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2204      	movs	r2, #4
 8002414:	4013      	ands	r3, r2
 8002416:	d109      	bne.n	800242c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0ca      	b.n	80025b2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800241c:	4b69      	ldr	r3, [pc, #420]	@ (80025c4 <HAL_RCC_ClockConfig+0x278>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	2380      	movs	r3, #128	@ 0x80
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4013      	ands	r3, r2
 8002426:	d101      	bne.n	800242c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0c2      	b.n	80025b2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800242c:	4b65      	ldr	r3, [pc, #404]	@ (80025c4 <HAL_RCC_ClockConfig+0x278>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	2203      	movs	r2, #3
 8002432:	4393      	bics	r3, r2
 8002434:	0019      	movs	r1, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	4b62      	ldr	r3, [pc, #392]	@ (80025c4 <HAL_RCC_ClockConfig+0x278>)
 800243c:	430a      	orrs	r2, r1
 800243e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002440:	f7fe fcca 	bl	8000dd8 <HAL_GetTick>
 8002444:	0003      	movs	r3, r0
 8002446:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b02      	cmp	r3, #2
 800244e:	d111      	bne.n	8002474 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002450:	e009      	b.n	8002466 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002452:	f7fe fcc1 	bl	8000dd8 <HAL_GetTick>
 8002456:	0002      	movs	r2, r0
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	4a58      	ldr	r2, [pc, #352]	@ (80025c0 <HAL_RCC_ClockConfig+0x274>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e0a5      	b.n	80025b2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002466:	4b57      	ldr	r3, [pc, #348]	@ (80025c4 <HAL_RCC_ClockConfig+0x278>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	220c      	movs	r2, #12
 800246c:	4013      	ands	r3, r2
 800246e:	2b08      	cmp	r3, #8
 8002470:	d1ef      	bne.n	8002452 <HAL_RCC_ClockConfig+0x106>
 8002472:	e03a      	b.n	80024ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b03      	cmp	r3, #3
 800247a:	d111      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800247c:	e009      	b.n	8002492 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800247e:	f7fe fcab 	bl	8000dd8 <HAL_GetTick>
 8002482:	0002      	movs	r2, r0
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	4a4d      	ldr	r2, [pc, #308]	@ (80025c0 <HAL_RCC_ClockConfig+0x274>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e08f      	b.n	80025b2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002492:	4b4c      	ldr	r3, [pc, #304]	@ (80025c4 <HAL_RCC_ClockConfig+0x278>)
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	220c      	movs	r2, #12
 8002498:	4013      	ands	r3, r2
 800249a:	2b0c      	cmp	r3, #12
 800249c:	d1ef      	bne.n	800247e <HAL_RCC_ClockConfig+0x132>
 800249e:	e024      	b.n	80024ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d11b      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024a8:	e009      	b.n	80024be <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024aa:	f7fe fc95 	bl	8000dd8 <HAL_GetTick>
 80024ae:	0002      	movs	r2, r0
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	4a42      	ldr	r2, [pc, #264]	@ (80025c0 <HAL_RCC_ClockConfig+0x274>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e079      	b.n	80025b2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024be:	4b41      	ldr	r3, [pc, #260]	@ (80025c4 <HAL_RCC_ClockConfig+0x278>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	220c      	movs	r2, #12
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d1ef      	bne.n	80024aa <HAL_RCC_ClockConfig+0x15e>
 80024ca:	e00e      	b.n	80024ea <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024cc:	f7fe fc84 	bl	8000dd8 <HAL_GetTick>
 80024d0:	0002      	movs	r2, r0
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	4a3a      	ldr	r2, [pc, #232]	@ (80025c0 <HAL_RCC_ClockConfig+0x274>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e068      	b.n	80025b2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80024e0:	4b38      	ldr	r3, [pc, #224]	@ (80025c4 <HAL_RCC_ClockConfig+0x278>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	220c      	movs	r2, #12
 80024e6:	4013      	ands	r3, r2
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024ea:	4b34      	ldr	r3, [pc, #208]	@ (80025bc <HAL_RCC_ClockConfig+0x270>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2201      	movs	r2, #1
 80024f0:	4013      	ands	r3, r2
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d21e      	bcs.n	8002536 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f8:	4b30      	ldr	r3, [pc, #192]	@ (80025bc <HAL_RCC_ClockConfig+0x270>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2201      	movs	r2, #1
 80024fe:	4393      	bics	r3, r2
 8002500:	0019      	movs	r1, r3
 8002502:	4b2e      	ldr	r3, [pc, #184]	@ (80025bc <HAL_RCC_ClockConfig+0x270>)
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800250a:	f7fe fc65 	bl	8000dd8 <HAL_GetTick>
 800250e:	0003      	movs	r3, r0
 8002510:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002512:	e009      	b.n	8002528 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002514:	f7fe fc60 	bl	8000dd8 <HAL_GetTick>
 8002518:	0002      	movs	r2, r0
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	4a28      	ldr	r2, [pc, #160]	@ (80025c0 <HAL_RCC_ClockConfig+0x274>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e044      	b.n	80025b2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002528:	4b24      	ldr	r3, [pc, #144]	@ (80025bc <HAL_RCC_ClockConfig+0x270>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2201      	movs	r2, #1
 800252e:	4013      	ands	r3, r2
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d1ee      	bne.n	8002514 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2204      	movs	r2, #4
 800253c:	4013      	ands	r3, r2
 800253e:	d009      	beq.n	8002554 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002540:	4b20      	ldr	r3, [pc, #128]	@ (80025c4 <HAL_RCC_ClockConfig+0x278>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	4a20      	ldr	r2, [pc, #128]	@ (80025c8 <HAL_RCC_ClockConfig+0x27c>)
 8002546:	4013      	ands	r3, r2
 8002548:	0019      	movs	r1, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	4b1d      	ldr	r3, [pc, #116]	@ (80025c4 <HAL_RCC_ClockConfig+0x278>)
 8002550:	430a      	orrs	r2, r1
 8002552:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2208      	movs	r2, #8
 800255a:	4013      	ands	r3, r2
 800255c:	d00a      	beq.n	8002574 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800255e:	4b19      	ldr	r3, [pc, #100]	@ (80025c4 <HAL_RCC_ClockConfig+0x278>)
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	4a1a      	ldr	r2, [pc, #104]	@ (80025cc <HAL_RCC_ClockConfig+0x280>)
 8002564:	4013      	ands	r3, r2
 8002566:	0019      	movs	r1, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	00da      	lsls	r2, r3, #3
 800256e:	4b15      	ldr	r3, [pc, #84]	@ (80025c4 <HAL_RCC_ClockConfig+0x278>)
 8002570:	430a      	orrs	r2, r1
 8002572:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002574:	f000 f832 	bl	80025dc <HAL_RCC_GetSysClockFreq>
 8002578:	0001      	movs	r1, r0
 800257a:	4b12      	ldr	r3, [pc, #72]	@ (80025c4 <HAL_RCC_ClockConfig+0x278>)
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	091b      	lsrs	r3, r3, #4
 8002580:	220f      	movs	r2, #15
 8002582:	4013      	ands	r3, r2
 8002584:	4a12      	ldr	r2, [pc, #72]	@ (80025d0 <HAL_RCC_ClockConfig+0x284>)
 8002586:	5cd3      	ldrb	r3, [r2, r3]
 8002588:	000a      	movs	r2, r1
 800258a:	40da      	lsrs	r2, r3
 800258c:	4b11      	ldr	r3, [pc, #68]	@ (80025d4 <HAL_RCC_ClockConfig+0x288>)
 800258e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002590:	4b11      	ldr	r3, [pc, #68]	@ (80025d8 <HAL_RCC_ClockConfig+0x28c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	250b      	movs	r5, #11
 8002596:	197c      	adds	r4, r7, r5
 8002598:	0018      	movs	r0, r3
 800259a:	f7fe fbd7 	bl	8000d4c <HAL_InitTick>
 800259e:	0003      	movs	r3, r0
 80025a0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80025a2:	197b      	adds	r3, r7, r5
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80025aa:	197b      	adds	r3, r7, r5
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	e000      	b.n	80025b2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	0018      	movs	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	b004      	add	sp, #16
 80025b8:	bdb0      	pop	{r4, r5, r7, pc}
 80025ba:	46c0      	nop			@ (mov r8, r8)
 80025bc:	40022000 	.word	0x40022000
 80025c0:	00001388 	.word	0x00001388
 80025c4:	40021000 	.word	0x40021000
 80025c8:	fffff8ff 	.word	0xfffff8ff
 80025cc:	ffffc7ff 	.word	0xffffc7ff
 80025d0:	08003724 	.word	0x08003724
 80025d4:	20000000 	.word	0x20000000
 80025d8:	20000004 	.word	0x20000004

080025dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025dc:	b5b0      	push	{r4, r5, r7, lr}
 80025de:	b08e      	sub	sp, #56	@ 0x38
 80025e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80025e2:	4b4c      	ldr	r3, [pc, #304]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x138>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025ea:	230c      	movs	r3, #12
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b0c      	cmp	r3, #12
 80025f0:	d014      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x40>
 80025f2:	d900      	bls.n	80025f6 <HAL_RCC_GetSysClockFreq+0x1a>
 80025f4:	e07b      	b.n	80026ee <HAL_RCC_GetSysClockFreq+0x112>
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d002      	beq.n	8002600 <HAL_RCC_GetSysClockFreq+0x24>
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	d00b      	beq.n	8002616 <HAL_RCC_GetSysClockFreq+0x3a>
 80025fe:	e076      	b.n	80026ee <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002600:	4b44      	ldr	r3, [pc, #272]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x138>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2210      	movs	r2, #16
 8002606:	4013      	ands	r3, r2
 8002608:	d002      	beq.n	8002610 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800260a:	4b43      	ldr	r3, [pc, #268]	@ (8002718 <HAL_RCC_GetSysClockFreq+0x13c>)
 800260c:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800260e:	e07c      	b.n	800270a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002610:	4b42      	ldr	r3, [pc, #264]	@ (800271c <HAL_RCC_GetSysClockFreq+0x140>)
 8002612:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002614:	e079      	b.n	800270a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002616:	4b42      	ldr	r3, [pc, #264]	@ (8002720 <HAL_RCC_GetSysClockFreq+0x144>)
 8002618:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800261a:	e076      	b.n	800270a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800261c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800261e:	0c9a      	lsrs	r2, r3, #18
 8002620:	230f      	movs	r3, #15
 8002622:	401a      	ands	r2, r3
 8002624:	4b3f      	ldr	r3, [pc, #252]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x148>)
 8002626:	5c9b      	ldrb	r3, [r3, r2]
 8002628:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800262a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800262c:	0d9a      	lsrs	r2, r3, #22
 800262e:	2303      	movs	r3, #3
 8002630:	4013      	ands	r3, r2
 8002632:	3301      	adds	r3, #1
 8002634:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002636:	4b37      	ldr	r3, [pc, #220]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x138>)
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	2380      	movs	r3, #128	@ 0x80
 800263c:	025b      	lsls	r3, r3, #9
 800263e:	4013      	ands	r3, r2
 8002640:	d01a      	beq.n	8002678 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002644:	61bb      	str	r3, [r7, #24]
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
 800264a:	4a35      	ldr	r2, [pc, #212]	@ (8002720 <HAL_RCC_GetSysClockFreq+0x144>)
 800264c:	2300      	movs	r3, #0
 800264e:	69b8      	ldr	r0, [r7, #24]
 8002650:	69f9      	ldr	r1, [r7, #28]
 8002652:	f7fd fe05 	bl	8000260 <__aeabi_lmul>
 8002656:	0002      	movs	r2, r0
 8002658:	000b      	movs	r3, r1
 800265a:	0010      	movs	r0, r2
 800265c:	0019      	movs	r1, r3
 800265e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f7fd fdd9 	bl	8000220 <__aeabi_uldivmod>
 800266e:	0002      	movs	r2, r0
 8002670:	000b      	movs	r3, r1
 8002672:	0013      	movs	r3, r2
 8002674:	637b      	str	r3, [r7, #52]	@ 0x34
 8002676:	e037      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002678:	4b26      	ldr	r3, [pc, #152]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x138>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2210      	movs	r2, #16
 800267e:	4013      	ands	r3, r2
 8002680:	d01a      	beq.n	80026b8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	4a23      	ldr	r2, [pc, #140]	@ (8002718 <HAL_RCC_GetSysClockFreq+0x13c>)
 800268c:	2300      	movs	r3, #0
 800268e:	68b8      	ldr	r0, [r7, #8]
 8002690:	68f9      	ldr	r1, [r7, #12]
 8002692:	f7fd fde5 	bl	8000260 <__aeabi_lmul>
 8002696:	0002      	movs	r2, r0
 8002698:	000b      	movs	r3, r1
 800269a:	0010      	movs	r0, r2
 800269c:	0019      	movs	r1, r3
 800269e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a0:	603b      	str	r3, [r7, #0]
 80026a2:	2300      	movs	r3, #0
 80026a4:	607b      	str	r3, [r7, #4]
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f7fd fdb9 	bl	8000220 <__aeabi_uldivmod>
 80026ae:	0002      	movs	r2, r0
 80026b0:	000b      	movs	r3, r1
 80026b2:	0013      	movs	r3, r2
 80026b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80026b6:	e017      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80026b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ba:	0018      	movs	r0, r3
 80026bc:	2300      	movs	r3, #0
 80026be:	0019      	movs	r1, r3
 80026c0:	4a16      	ldr	r2, [pc, #88]	@ (800271c <HAL_RCC_GetSysClockFreq+0x140>)
 80026c2:	2300      	movs	r3, #0
 80026c4:	f7fd fdcc 	bl	8000260 <__aeabi_lmul>
 80026c8:	0002      	movs	r2, r0
 80026ca:	000b      	movs	r3, r1
 80026cc:	0010      	movs	r0, r2
 80026ce:	0019      	movs	r1, r3
 80026d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d2:	001c      	movs	r4, r3
 80026d4:	2300      	movs	r3, #0
 80026d6:	001d      	movs	r5, r3
 80026d8:	0022      	movs	r2, r4
 80026da:	002b      	movs	r3, r5
 80026dc:	f7fd fda0 	bl	8000220 <__aeabi_uldivmod>
 80026e0:	0002      	movs	r2, r0
 80026e2:	000b      	movs	r3, r1
 80026e4:	0013      	movs	r3, r2
 80026e6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80026e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ea:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80026ec:	e00d      	b.n	800270a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80026ee:	4b09      	ldr	r3, [pc, #36]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x138>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	0b5b      	lsrs	r3, r3, #13
 80026f4:	2207      	movs	r2, #7
 80026f6:	4013      	ands	r3, r2
 80026f8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80026fa:	6a3b      	ldr	r3, [r7, #32]
 80026fc:	3301      	adds	r3, #1
 80026fe:	2280      	movs	r2, #128	@ 0x80
 8002700:	0212      	lsls	r2, r2, #8
 8002702:	409a      	lsls	r2, r3
 8002704:	0013      	movs	r3, r2
 8002706:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002708:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800270a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800270c:	0018      	movs	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	b00e      	add	sp, #56	@ 0x38
 8002712:	bdb0      	pop	{r4, r5, r7, pc}
 8002714:	40021000 	.word	0x40021000
 8002718:	003d0900 	.word	0x003d0900
 800271c:	00f42400 	.word	0x00f42400
 8002720:	007a1200 	.word	0x007a1200
 8002724:	0800373c 	.word	0x0800373c

08002728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800272c:	4b02      	ldr	r3, [pc, #8]	@ (8002738 <HAL_RCC_GetHCLKFreq+0x10>)
 800272e:	681b      	ldr	r3, [r3, #0]
}
 8002730:	0018      	movs	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	46c0      	nop			@ (mov r8, r8)
 8002738:	20000000 	.word	0x20000000

0800273c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002740:	f7ff fff2 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 8002744:	0001      	movs	r1, r0
 8002746:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	0a1b      	lsrs	r3, r3, #8
 800274c:	2207      	movs	r2, #7
 800274e:	4013      	ands	r3, r2
 8002750:	4a04      	ldr	r2, [pc, #16]	@ (8002764 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002752:	5cd3      	ldrb	r3, [r2, r3]
 8002754:	40d9      	lsrs	r1, r3
 8002756:	000b      	movs	r3, r1
}
 8002758:	0018      	movs	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	46c0      	nop			@ (mov r8, r8)
 8002760:	40021000 	.word	0x40021000
 8002764:	08003734 	.word	0x08003734

08002768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800276c:	f7ff ffdc 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 8002770:	0001      	movs	r1, r0
 8002772:	4b06      	ldr	r3, [pc, #24]	@ (800278c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	0adb      	lsrs	r3, r3, #11
 8002778:	2207      	movs	r2, #7
 800277a:	4013      	ands	r3, r2
 800277c:	4a04      	ldr	r2, [pc, #16]	@ (8002790 <HAL_RCC_GetPCLK2Freq+0x28>)
 800277e:	5cd3      	ldrb	r3, [r2, r3]
 8002780:	40d9      	lsrs	r1, r3
 8002782:	000b      	movs	r3, r1
}
 8002784:	0018      	movs	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	46c0      	nop			@ (mov r8, r8)
 800278c:	40021000 	.word	0x40021000
 8002790:	08003734 	.word	0x08003734

08002794 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800279c:	2317      	movs	r3, #23
 800279e:	18fb      	adds	r3, r7, r3
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2220      	movs	r2, #32
 80027aa:	4013      	ands	r3, r2
 80027ac:	d106      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	2380      	movs	r3, #128	@ 0x80
 80027b4:	011b      	lsls	r3, r3, #4
 80027b6:	4013      	ands	r3, r2
 80027b8:	d100      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x28>
 80027ba:	e104      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027bc:	4bb9      	ldr	r3, [pc, #740]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027c0:	2380      	movs	r3, #128	@ 0x80
 80027c2:	055b      	lsls	r3, r3, #21
 80027c4:	4013      	ands	r3, r2
 80027c6:	d10a      	bne.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c8:	4bb6      	ldr	r3, [pc, #728]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027cc:	4bb5      	ldr	r3, [pc, #724]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027ce:	2180      	movs	r1, #128	@ 0x80
 80027d0:	0549      	lsls	r1, r1, #21
 80027d2:	430a      	orrs	r2, r1
 80027d4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80027d6:	2317      	movs	r3, #23
 80027d8:	18fb      	adds	r3, r7, r3
 80027da:	2201      	movs	r2, #1
 80027dc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027de:	4bb2      	ldr	r3, [pc, #712]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	2380      	movs	r3, #128	@ 0x80
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	4013      	ands	r3, r2
 80027e8:	d11a      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ea:	4baf      	ldr	r3, [pc, #700]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	4bae      	ldr	r3, [pc, #696]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80027f0:	2180      	movs	r1, #128	@ 0x80
 80027f2:	0049      	lsls	r1, r1, #1
 80027f4:	430a      	orrs	r2, r1
 80027f6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027f8:	f7fe faee 	bl	8000dd8 <HAL_GetTick>
 80027fc:	0003      	movs	r3, r0
 80027fe:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002800:	e008      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002802:	f7fe fae9 	bl	8000dd8 <HAL_GetTick>
 8002806:	0002      	movs	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b64      	cmp	r3, #100	@ 0x64
 800280e:	d901      	bls.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e143      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002814:	4ba4      	ldr	r3, [pc, #656]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	2380      	movs	r3, #128	@ 0x80
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	4013      	ands	r3, r2
 800281e:	d0f0      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002820:	4ba0      	ldr	r3, [pc, #640]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	23c0      	movs	r3, #192	@ 0xc0
 8002826:	039b      	lsls	r3, r3, #14
 8002828:	4013      	ands	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	23c0      	movs	r3, #192	@ 0xc0
 8002832:	039b      	lsls	r3, r3, #14
 8002834:	4013      	ands	r3, r2
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	429a      	cmp	r2, r3
 800283a:	d107      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	23c0      	movs	r3, #192	@ 0xc0
 8002842:	039b      	lsls	r3, r3, #14
 8002844:	4013      	ands	r3, r2
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	429a      	cmp	r2, r3
 800284a:	d013      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	23c0      	movs	r3, #192	@ 0xc0
 8002852:	029b      	lsls	r3, r3, #10
 8002854:	401a      	ands	r2, r3
 8002856:	23c0      	movs	r3, #192	@ 0xc0
 8002858:	029b      	lsls	r3, r3, #10
 800285a:	429a      	cmp	r2, r3
 800285c:	d10a      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800285e:	4b91      	ldr	r3, [pc, #580]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	2380      	movs	r3, #128	@ 0x80
 8002864:	029b      	lsls	r3, r3, #10
 8002866:	401a      	ands	r2, r3
 8002868:	2380      	movs	r3, #128	@ 0x80
 800286a:	029b      	lsls	r3, r3, #10
 800286c:	429a      	cmp	r2, r3
 800286e:	d101      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e113      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002874:	4b8b      	ldr	r3, [pc, #556]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002876:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002878:	23c0      	movs	r3, #192	@ 0xc0
 800287a:	029b      	lsls	r3, r3, #10
 800287c:	4013      	ands	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d049      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	23c0      	movs	r3, #192	@ 0xc0
 800288c:	029b      	lsls	r3, r3, #10
 800288e:	4013      	ands	r3, r2
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	429a      	cmp	r2, r3
 8002894:	d004      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2220      	movs	r2, #32
 800289c:	4013      	ands	r3, r2
 800289e:	d10d      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	23c0      	movs	r3, #192	@ 0xc0
 80028a6:	029b      	lsls	r3, r3, #10
 80028a8:	4013      	ands	r3, r2
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d034      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	2380      	movs	r3, #128	@ 0x80
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	4013      	ands	r3, r2
 80028ba:	d02e      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80028bc:	4b79      	ldr	r3, [pc, #484]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028c0:	4a7a      	ldr	r2, [pc, #488]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028c6:	4b77      	ldr	r3, [pc, #476]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80028ca:	4b76      	ldr	r3, [pc, #472]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028cc:	2180      	movs	r1, #128	@ 0x80
 80028ce:	0309      	lsls	r1, r1, #12
 80028d0:	430a      	orrs	r2, r1
 80028d2:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028d4:	4b73      	ldr	r3, [pc, #460]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80028d8:	4b72      	ldr	r3, [pc, #456]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028da:	4975      	ldr	r1, [pc, #468]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80028dc:	400a      	ands	r2, r1
 80028de:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80028e0:	4b70      	ldr	r3, [pc, #448]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	2380      	movs	r3, #128	@ 0x80
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4013      	ands	r3, r2
 80028ee:	d014      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f0:	f7fe fa72 	bl	8000dd8 <HAL_GetTick>
 80028f4:	0003      	movs	r3, r0
 80028f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028f8:	e009      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028fa:	f7fe fa6d 	bl	8000dd8 <HAL_GetTick>
 80028fe:	0002      	movs	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	4a6b      	ldr	r2, [pc, #428]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e0c6      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800290e:	4b65      	ldr	r3, [pc, #404]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002910:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002912:	2380      	movs	r3, #128	@ 0x80
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4013      	ands	r3, r2
 8002918:	d0ef      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	2380      	movs	r3, #128	@ 0x80
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	4013      	ands	r3, r2
 8002924:	d01f      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	23c0      	movs	r3, #192	@ 0xc0
 800292c:	029b      	lsls	r3, r3, #10
 800292e:	401a      	ands	r2, r3
 8002930:	23c0      	movs	r3, #192	@ 0xc0
 8002932:	029b      	lsls	r3, r3, #10
 8002934:	429a      	cmp	r2, r3
 8002936:	d10c      	bne.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002938:	4b5a      	ldr	r3, [pc, #360]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a5e      	ldr	r2, [pc, #376]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800293e:	4013      	ands	r3, r2
 8002940:	0019      	movs	r1, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	23c0      	movs	r3, #192	@ 0xc0
 8002948:	039b      	lsls	r3, r3, #14
 800294a:	401a      	ands	r2, r3
 800294c:	4b55      	ldr	r3, [pc, #340]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800294e:	430a      	orrs	r2, r1
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	4b54      	ldr	r3, [pc, #336]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002954:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	23c0      	movs	r3, #192	@ 0xc0
 800295c:	029b      	lsls	r3, r3, #10
 800295e:	401a      	ands	r2, r3
 8002960:	4b50      	ldr	r3, [pc, #320]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002962:	430a      	orrs	r2, r1
 8002964:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2220      	movs	r2, #32
 800296c:	4013      	ands	r3, r2
 800296e:	d01f      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	23c0      	movs	r3, #192	@ 0xc0
 8002976:	029b      	lsls	r3, r3, #10
 8002978:	401a      	ands	r2, r3
 800297a:	23c0      	movs	r3, #192	@ 0xc0
 800297c:	029b      	lsls	r3, r3, #10
 800297e:	429a      	cmp	r2, r3
 8002980:	d10c      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002982:	4b48      	ldr	r3, [pc, #288]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a4c      	ldr	r2, [pc, #304]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002988:	4013      	ands	r3, r2
 800298a:	0019      	movs	r1, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	23c0      	movs	r3, #192	@ 0xc0
 8002992:	039b      	lsls	r3, r3, #14
 8002994:	401a      	ands	r2, r3
 8002996:	4b43      	ldr	r3, [pc, #268]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002998:	430a      	orrs	r2, r1
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	4b41      	ldr	r3, [pc, #260]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800299e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	23c0      	movs	r3, #192	@ 0xc0
 80029a6:	029b      	lsls	r3, r3, #10
 80029a8:	401a      	ands	r2, r3
 80029aa:	4b3e      	ldr	r3, [pc, #248]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029ac:	430a      	orrs	r2, r1
 80029ae:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029b0:	2317      	movs	r3, #23
 80029b2:	18fb      	adds	r3, r7, r3
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d105      	bne.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ba:	4b3a      	ldr	r3, [pc, #232]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029be:	4b39      	ldr	r3, [pc, #228]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029c0:	493e      	ldr	r1, [pc, #248]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80029c2:	400a      	ands	r2, r1
 80029c4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2201      	movs	r2, #1
 80029cc:	4013      	ands	r3, r2
 80029ce:	d009      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029d0:	4b34      	ldr	r3, [pc, #208]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d4:	2203      	movs	r2, #3
 80029d6:	4393      	bics	r3, r2
 80029d8:	0019      	movs	r1, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	4b31      	ldr	r3, [pc, #196]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029e0:	430a      	orrs	r2, r1
 80029e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2202      	movs	r2, #2
 80029ea:	4013      	ands	r3, r2
 80029ec:	d009      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029ee:	4b2d      	ldr	r3, [pc, #180]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f2:	220c      	movs	r2, #12
 80029f4:	4393      	bics	r3, r2
 80029f6:	0019      	movs	r1, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691a      	ldr	r2, [r3, #16]
 80029fc:	4b29      	ldr	r3, [pc, #164]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029fe:	430a      	orrs	r2, r1
 8002a00:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2204      	movs	r2, #4
 8002a08:	4013      	ands	r3, r2
 8002a0a:	d009      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a0c:	4b25      	ldr	r3, [pc, #148]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a10:	4a2b      	ldr	r2, [pc, #172]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002a12:	4013      	ands	r3, r2
 8002a14:	0019      	movs	r1, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695a      	ldr	r2, [r3, #20]
 8002a1a:	4b22      	ldr	r3, [pc, #136]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2208      	movs	r2, #8
 8002a26:	4013      	ands	r3, r2
 8002a28:	d009      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a2e:	4a25      	ldr	r2, [pc, #148]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	0019      	movs	r1, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	699a      	ldr	r2, [r3, #24]
 8002a38:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	2380      	movs	r3, #128	@ 0x80
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	4013      	ands	r3, r2
 8002a48:	d009      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a4a:	4b16      	ldr	r3, [pc, #88]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a4e:	4a17      	ldr	r2, [pc, #92]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	0019      	movs	r1, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69da      	ldr	r2, [r3, #28]
 8002a58:	4b12      	ldr	r3, [pc, #72]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2240      	movs	r2, #64	@ 0x40
 8002a64:	4013      	ands	r3, r2
 8002a66:	d009      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a68:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a6c:	4a16      	ldr	r2, [pc, #88]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002a6e:	4013      	ands	r3, r2
 8002a70:	0019      	movs	r1, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a76:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2280      	movs	r2, #128	@ 0x80
 8002a82:	4013      	ands	r3, r2
 8002a84:	d009      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002a86:	4b07      	ldr	r3, [pc, #28]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a8a:	4a10      	ldr	r2, [pc, #64]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	0019      	movs	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a1a      	ldr	r2, [r3, #32]
 8002a94:	4b03      	ldr	r3, [pc, #12]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a96:	430a      	orrs	r2, r1
 8002a98:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b006      	add	sp, #24
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40007000 	.word	0x40007000
 8002aac:	fffcffff 	.word	0xfffcffff
 8002ab0:	fff7ffff 	.word	0xfff7ffff
 8002ab4:	00001388 	.word	0x00001388
 8002ab8:	ffcfffff 	.word	0xffcfffff
 8002abc:	efffffff 	.word	0xefffffff
 8002ac0:	fffff3ff 	.word	0xfffff3ff
 8002ac4:	ffffcfff 	.word	0xffffcfff
 8002ac8:	fbffffff 	.word	0xfbffffff
 8002acc:	fff3ffff 	.word	0xfff3ffff

08002ad0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e083      	b.n	8002bea <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d109      	bne.n	8002afe <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	2382      	movs	r3, #130	@ 0x82
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d009      	beq.n	8002b0a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	61da      	str	r2, [r3, #28]
 8002afc:	e005      	b.n	8002b0a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2251      	movs	r2, #81	@ 0x51
 8002b14:	5c9b      	ldrb	r3, [r3, r2]
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d107      	bne.n	8002b2c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2250      	movs	r2, #80	@ 0x50
 8002b20:	2100      	movs	r1, #0
 8002b22:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	0018      	movs	r0, r3
 8002b28:	f7fd ffd4 	bl	8000ad4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2251      	movs	r2, #81	@ 0x51
 8002b30:	2102      	movs	r1, #2
 8002b32:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2140      	movs	r1, #64	@ 0x40
 8002b40:	438a      	bics	r2, r1
 8002b42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	2382      	movs	r3, #130	@ 0x82
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	401a      	ands	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6899      	ldr	r1, [r3, #8]
 8002b52:	2384      	movs	r3, #132	@ 0x84
 8002b54:	021b      	lsls	r3, r3, #8
 8002b56:	400b      	ands	r3, r1
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68d9      	ldr	r1, [r3, #12]
 8002b5e:	2380      	movs	r3, #128	@ 0x80
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	400b      	ands	r3, r1
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	2102      	movs	r1, #2
 8002b6c:	400b      	ands	r3, r1
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	2101      	movs	r1, #1
 8002b76:	400b      	ands	r3, r1
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6999      	ldr	r1, [r3, #24]
 8002b7e:	2380      	movs	r3, #128	@ 0x80
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	400b      	ands	r3, r1
 8002b84:	431a      	orrs	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	2138      	movs	r1, #56	@ 0x38
 8002b8c:	400b      	ands	r3, r1
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	2180      	movs	r1, #128	@ 0x80
 8002b96:	400b      	ands	r3, r1
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	0011      	movs	r1, r2
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ba0:	2380      	movs	r3, #128	@ 0x80
 8002ba2:	019b      	lsls	r3, r3, #6
 8002ba4:	401a      	ands	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	0c1b      	lsrs	r3, r3, #16
 8002bb4:	2204      	movs	r2, #4
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	0019      	movs	r1, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbe:	2210      	movs	r2, #16
 8002bc0:	401a      	ands	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	69da      	ldr	r2, [r3, #28]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4907      	ldr	r1, [pc, #28]	@ (8002bf4 <HAL_SPI_Init+0x124>)
 8002bd6:	400a      	ands	r2, r1
 8002bd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2251      	movs	r2, #81	@ 0x51
 8002be4:	2101      	movs	r1, #1
 8002be6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	0018      	movs	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b002      	add	sp, #8
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	46c0      	nop			@ (mov r8, r8)
 8002bf4:	fffff7ff 	.word	0xfffff7ff

08002bf8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e044      	b.n	8002c94 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d107      	bne.n	8002c22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2278      	movs	r2, #120	@ 0x78
 8002c16:	2100      	movs	r1, #0
 8002c18:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f7fd ff9d 	bl	8000b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2224      	movs	r2, #36	@ 0x24
 8002c26:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2101      	movs	r1, #1
 8002c34:	438a      	bics	r2, r1
 8002c36:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f000 f830 	bl	8002ca0 <UART_SetConfig>
 8002c40:	0003      	movs	r3, r0
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e024      	b.n	8002c94 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	0018      	movs	r0, r3
 8002c56:	f000 fac1 	bl	80031dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	490d      	ldr	r1, [pc, #52]	@ (8002c9c <HAL_UART_Init+0xa4>)
 8002c66:	400a      	ands	r2, r1
 8002c68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	212a      	movs	r1, #42	@ 0x2a
 8002c76:	438a      	bics	r2, r1
 8002c78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2101      	movs	r1, #1
 8002c86:	430a      	orrs	r2, r1
 8002c88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f000 fb59 	bl	8003344 <UART_CheckIdleState>
 8002c92:	0003      	movs	r3, r0
}
 8002c94:	0018      	movs	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b002      	add	sp, #8
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	ffffb7ff 	.word	0xffffb7ff

08002ca0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ca0:	b5b0      	push	{r4, r5, r7, lr}
 8002ca2:	b08e      	sub	sp, #56	@ 0x38
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ca8:	231a      	movs	r3, #26
 8002caa:	2218      	movs	r2, #24
 8002cac:	189b      	adds	r3, r3, r2
 8002cae:	19db      	adds	r3, r3, r7
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4ac3      	ldr	r2, [pc, #780]	@ (8002fe0 <UART_SetConfig+0x340>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	0019      	movs	r1, r3
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	4abe      	ldr	r2, [pc, #760]	@ (8002fe4 <UART_SetConfig+0x344>)
 8002cea:	4013      	ands	r3, r2
 8002cec:	0019      	movs	r1, r3
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4ab8      	ldr	r2, [pc, #736]	@ (8002fe8 <UART_SetConfig+0x348>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d004      	beq.n	8002d14 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d10:	4313      	orrs	r3, r2
 8002d12:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	4ab4      	ldr	r2, [pc, #720]	@ (8002fec <UART_SetConfig+0x34c>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	0019      	movs	r1, r3
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d26:	430a      	orrs	r2, r1
 8002d28:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4ab0      	ldr	r2, [pc, #704]	@ (8002ff0 <UART_SetConfig+0x350>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d131      	bne.n	8002d98 <UART_SetConfig+0xf8>
 8002d34:	4baf      	ldr	r3, [pc, #700]	@ (8002ff4 <UART_SetConfig+0x354>)
 8002d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d38:	2203      	movs	r2, #3
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b03      	cmp	r3, #3
 8002d3e:	d01d      	beq.n	8002d7c <UART_SetConfig+0xdc>
 8002d40:	d823      	bhi.n	8002d8a <UART_SetConfig+0xea>
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d00c      	beq.n	8002d60 <UART_SetConfig+0xc0>
 8002d46:	d820      	bhi.n	8002d8a <UART_SetConfig+0xea>
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <UART_SetConfig+0xb2>
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d00e      	beq.n	8002d6e <UART_SetConfig+0xce>
 8002d50:	e01b      	b.n	8002d8a <UART_SetConfig+0xea>
 8002d52:	231b      	movs	r3, #27
 8002d54:	2218      	movs	r2, #24
 8002d56:	189b      	adds	r3, r3, r2
 8002d58:	19db      	adds	r3, r3, r7
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	701a      	strb	r2, [r3, #0]
 8002d5e:	e0b4      	b.n	8002eca <UART_SetConfig+0x22a>
 8002d60:	231b      	movs	r3, #27
 8002d62:	2218      	movs	r2, #24
 8002d64:	189b      	adds	r3, r3, r2
 8002d66:	19db      	adds	r3, r3, r7
 8002d68:	2202      	movs	r2, #2
 8002d6a:	701a      	strb	r2, [r3, #0]
 8002d6c:	e0ad      	b.n	8002eca <UART_SetConfig+0x22a>
 8002d6e:	231b      	movs	r3, #27
 8002d70:	2218      	movs	r2, #24
 8002d72:	189b      	adds	r3, r3, r2
 8002d74:	19db      	adds	r3, r3, r7
 8002d76:	2204      	movs	r2, #4
 8002d78:	701a      	strb	r2, [r3, #0]
 8002d7a:	e0a6      	b.n	8002eca <UART_SetConfig+0x22a>
 8002d7c:	231b      	movs	r3, #27
 8002d7e:	2218      	movs	r2, #24
 8002d80:	189b      	adds	r3, r3, r2
 8002d82:	19db      	adds	r3, r3, r7
 8002d84:	2208      	movs	r2, #8
 8002d86:	701a      	strb	r2, [r3, #0]
 8002d88:	e09f      	b.n	8002eca <UART_SetConfig+0x22a>
 8002d8a:	231b      	movs	r3, #27
 8002d8c:	2218      	movs	r2, #24
 8002d8e:	189b      	adds	r3, r3, r2
 8002d90:	19db      	adds	r3, r3, r7
 8002d92:	2210      	movs	r2, #16
 8002d94:	701a      	strb	r2, [r3, #0]
 8002d96:	e098      	b.n	8002eca <UART_SetConfig+0x22a>
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a96      	ldr	r2, [pc, #600]	@ (8002ff8 <UART_SetConfig+0x358>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d131      	bne.n	8002e06 <UART_SetConfig+0x166>
 8002da2:	4b94      	ldr	r3, [pc, #592]	@ (8002ff4 <UART_SetConfig+0x354>)
 8002da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002da6:	220c      	movs	r2, #12
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b0c      	cmp	r3, #12
 8002dac:	d01d      	beq.n	8002dea <UART_SetConfig+0x14a>
 8002dae:	d823      	bhi.n	8002df8 <UART_SetConfig+0x158>
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d00c      	beq.n	8002dce <UART_SetConfig+0x12e>
 8002db4:	d820      	bhi.n	8002df8 <UART_SetConfig+0x158>
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <UART_SetConfig+0x120>
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d00e      	beq.n	8002ddc <UART_SetConfig+0x13c>
 8002dbe:	e01b      	b.n	8002df8 <UART_SetConfig+0x158>
 8002dc0:	231b      	movs	r3, #27
 8002dc2:	2218      	movs	r2, #24
 8002dc4:	189b      	adds	r3, r3, r2
 8002dc6:	19db      	adds	r3, r3, r7
 8002dc8:	2200      	movs	r2, #0
 8002dca:	701a      	strb	r2, [r3, #0]
 8002dcc:	e07d      	b.n	8002eca <UART_SetConfig+0x22a>
 8002dce:	231b      	movs	r3, #27
 8002dd0:	2218      	movs	r2, #24
 8002dd2:	189b      	adds	r3, r3, r2
 8002dd4:	19db      	adds	r3, r3, r7
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	701a      	strb	r2, [r3, #0]
 8002dda:	e076      	b.n	8002eca <UART_SetConfig+0x22a>
 8002ddc:	231b      	movs	r3, #27
 8002dde:	2218      	movs	r2, #24
 8002de0:	189b      	adds	r3, r3, r2
 8002de2:	19db      	adds	r3, r3, r7
 8002de4:	2204      	movs	r2, #4
 8002de6:	701a      	strb	r2, [r3, #0]
 8002de8:	e06f      	b.n	8002eca <UART_SetConfig+0x22a>
 8002dea:	231b      	movs	r3, #27
 8002dec:	2218      	movs	r2, #24
 8002dee:	189b      	adds	r3, r3, r2
 8002df0:	19db      	adds	r3, r3, r7
 8002df2:	2208      	movs	r2, #8
 8002df4:	701a      	strb	r2, [r3, #0]
 8002df6:	e068      	b.n	8002eca <UART_SetConfig+0x22a>
 8002df8:	231b      	movs	r3, #27
 8002dfa:	2218      	movs	r2, #24
 8002dfc:	189b      	adds	r3, r3, r2
 8002dfe:	19db      	adds	r3, r3, r7
 8002e00:	2210      	movs	r2, #16
 8002e02:	701a      	strb	r2, [r3, #0]
 8002e04:	e061      	b.n	8002eca <UART_SetConfig+0x22a>
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a7c      	ldr	r2, [pc, #496]	@ (8002ffc <UART_SetConfig+0x35c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d106      	bne.n	8002e1e <UART_SetConfig+0x17e>
 8002e10:	231b      	movs	r3, #27
 8002e12:	2218      	movs	r2, #24
 8002e14:	189b      	adds	r3, r3, r2
 8002e16:	19db      	adds	r3, r3, r7
 8002e18:	2200      	movs	r2, #0
 8002e1a:	701a      	strb	r2, [r3, #0]
 8002e1c:	e055      	b.n	8002eca <UART_SetConfig+0x22a>
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a77      	ldr	r2, [pc, #476]	@ (8003000 <UART_SetConfig+0x360>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d106      	bne.n	8002e36 <UART_SetConfig+0x196>
 8002e28:	231b      	movs	r3, #27
 8002e2a:	2218      	movs	r2, #24
 8002e2c:	189b      	adds	r3, r3, r2
 8002e2e:	19db      	adds	r3, r3, r7
 8002e30:	2200      	movs	r2, #0
 8002e32:	701a      	strb	r2, [r3, #0]
 8002e34:	e049      	b.n	8002eca <UART_SetConfig+0x22a>
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a6b      	ldr	r2, [pc, #428]	@ (8002fe8 <UART_SetConfig+0x348>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d13e      	bne.n	8002ebe <UART_SetConfig+0x21e>
 8002e40:	4b6c      	ldr	r3, [pc, #432]	@ (8002ff4 <UART_SetConfig+0x354>)
 8002e42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e44:	23c0      	movs	r3, #192	@ 0xc0
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	4013      	ands	r3, r2
 8002e4a:	22c0      	movs	r2, #192	@ 0xc0
 8002e4c:	0112      	lsls	r2, r2, #4
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d027      	beq.n	8002ea2 <UART_SetConfig+0x202>
 8002e52:	22c0      	movs	r2, #192	@ 0xc0
 8002e54:	0112      	lsls	r2, r2, #4
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d82a      	bhi.n	8002eb0 <UART_SetConfig+0x210>
 8002e5a:	2280      	movs	r2, #128	@ 0x80
 8002e5c:	0112      	lsls	r2, r2, #4
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d011      	beq.n	8002e86 <UART_SetConfig+0x1e6>
 8002e62:	2280      	movs	r2, #128	@ 0x80
 8002e64:	0112      	lsls	r2, r2, #4
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d822      	bhi.n	8002eb0 <UART_SetConfig+0x210>
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d004      	beq.n	8002e78 <UART_SetConfig+0x1d8>
 8002e6e:	2280      	movs	r2, #128	@ 0x80
 8002e70:	00d2      	lsls	r2, r2, #3
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d00e      	beq.n	8002e94 <UART_SetConfig+0x1f4>
 8002e76:	e01b      	b.n	8002eb0 <UART_SetConfig+0x210>
 8002e78:	231b      	movs	r3, #27
 8002e7a:	2218      	movs	r2, #24
 8002e7c:	189b      	adds	r3, r3, r2
 8002e7e:	19db      	adds	r3, r3, r7
 8002e80:	2200      	movs	r2, #0
 8002e82:	701a      	strb	r2, [r3, #0]
 8002e84:	e021      	b.n	8002eca <UART_SetConfig+0x22a>
 8002e86:	231b      	movs	r3, #27
 8002e88:	2218      	movs	r2, #24
 8002e8a:	189b      	adds	r3, r3, r2
 8002e8c:	19db      	adds	r3, r3, r7
 8002e8e:	2202      	movs	r2, #2
 8002e90:	701a      	strb	r2, [r3, #0]
 8002e92:	e01a      	b.n	8002eca <UART_SetConfig+0x22a>
 8002e94:	231b      	movs	r3, #27
 8002e96:	2218      	movs	r2, #24
 8002e98:	189b      	adds	r3, r3, r2
 8002e9a:	19db      	adds	r3, r3, r7
 8002e9c:	2204      	movs	r2, #4
 8002e9e:	701a      	strb	r2, [r3, #0]
 8002ea0:	e013      	b.n	8002eca <UART_SetConfig+0x22a>
 8002ea2:	231b      	movs	r3, #27
 8002ea4:	2218      	movs	r2, #24
 8002ea6:	189b      	adds	r3, r3, r2
 8002ea8:	19db      	adds	r3, r3, r7
 8002eaa:	2208      	movs	r2, #8
 8002eac:	701a      	strb	r2, [r3, #0]
 8002eae:	e00c      	b.n	8002eca <UART_SetConfig+0x22a>
 8002eb0:	231b      	movs	r3, #27
 8002eb2:	2218      	movs	r2, #24
 8002eb4:	189b      	adds	r3, r3, r2
 8002eb6:	19db      	adds	r3, r3, r7
 8002eb8:	2210      	movs	r2, #16
 8002eba:	701a      	strb	r2, [r3, #0]
 8002ebc:	e005      	b.n	8002eca <UART_SetConfig+0x22a>
 8002ebe:	231b      	movs	r3, #27
 8002ec0:	2218      	movs	r2, #24
 8002ec2:	189b      	adds	r3, r3, r2
 8002ec4:	19db      	adds	r3, r3, r7
 8002ec6:	2210      	movs	r2, #16
 8002ec8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a46      	ldr	r2, [pc, #280]	@ (8002fe8 <UART_SetConfig+0x348>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d000      	beq.n	8002ed6 <UART_SetConfig+0x236>
 8002ed4:	e09a      	b.n	800300c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ed6:	231b      	movs	r3, #27
 8002ed8:	2218      	movs	r2, #24
 8002eda:	189b      	adds	r3, r3, r2
 8002edc:	19db      	adds	r3, r3, r7
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d01d      	beq.n	8002f20 <UART_SetConfig+0x280>
 8002ee4:	dc20      	bgt.n	8002f28 <UART_SetConfig+0x288>
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d015      	beq.n	8002f16 <UART_SetConfig+0x276>
 8002eea:	dc1d      	bgt.n	8002f28 <UART_SetConfig+0x288>
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d002      	beq.n	8002ef6 <UART_SetConfig+0x256>
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d005      	beq.n	8002f00 <UART_SetConfig+0x260>
 8002ef4:	e018      	b.n	8002f28 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ef6:	f7ff fc21 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8002efa:	0003      	movs	r3, r0
 8002efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002efe:	e01c      	b.n	8002f3a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f00:	4b3c      	ldr	r3, [pc, #240]	@ (8002ff4 <UART_SetConfig+0x354>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2210      	movs	r2, #16
 8002f06:	4013      	ands	r3, r2
 8002f08:	d002      	beq.n	8002f10 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002f0a:	4b3e      	ldr	r3, [pc, #248]	@ (8003004 <UART_SetConfig+0x364>)
 8002f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002f0e:	e014      	b.n	8002f3a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8002f10:	4b3d      	ldr	r3, [pc, #244]	@ (8003008 <UART_SetConfig+0x368>)
 8002f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002f14:	e011      	b.n	8002f3a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f16:	f7ff fb61 	bl	80025dc <HAL_RCC_GetSysClockFreq>
 8002f1a:	0003      	movs	r3, r0
 8002f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002f1e:	e00c      	b.n	8002f3a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f20:	2380      	movs	r3, #128	@ 0x80
 8002f22:	021b      	lsls	r3, r3, #8
 8002f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002f26:	e008      	b.n	8002f3a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002f2c:	231a      	movs	r3, #26
 8002f2e:	2218      	movs	r2, #24
 8002f30:	189b      	adds	r3, r3, r2
 8002f32:	19db      	adds	r3, r3, r7
 8002f34:	2201      	movs	r2, #1
 8002f36:	701a      	strb	r2, [r3, #0]
        break;
 8002f38:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d100      	bne.n	8002f42 <UART_SetConfig+0x2a2>
 8002f40:	e133      	b.n	80031aa <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	0013      	movs	r3, r2
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	189b      	adds	r3, r3, r2
 8002f4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d305      	bcc.n	8002f5e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d906      	bls.n	8002f6c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8002f5e:	231a      	movs	r3, #26
 8002f60:	2218      	movs	r2, #24
 8002f62:	189b      	adds	r3, r3, r2
 8002f64:	19db      	adds	r3, r3, r7
 8002f66:	2201      	movs	r2, #1
 8002f68:	701a      	strb	r2, [r3, #0]
 8002f6a:	e11e      	b.n	80031aa <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	6939      	ldr	r1, [r7, #16]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	000b      	movs	r3, r1
 8002f7a:	0e1b      	lsrs	r3, r3, #24
 8002f7c:	0010      	movs	r0, r2
 8002f7e:	0205      	lsls	r5, r0, #8
 8002f80:	431d      	orrs	r5, r3
 8002f82:	000b      	movs	r3, r1
 8002f84:	021c      	lsls	r4, r3, #8
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	085b      	lsrs	r3, r3, #1
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	68b8      	ldr	r0, [r7, #8]
 8002f94:	68f9      	ldr	r1, [r7, #12]
 8002f96:	1900      	adds	r0, r0, r4
 8002f98:	4169      	adcs	r1, r5
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	603b      	str	r3, [r7, #0]
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	607b      	str	r3, [r7, #4]
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f7fd f93a 	bl	8000220 <__aeabi_uldivmod>
 8002fac:	0002      	movs	r2, r0
 8002fae:	000b      	movs	r3, r1
 8002fb0:	0013      	movs	r3, r2
 8002fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002fb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fb6:	23c0      	movs	r3, #192	@ 0xc0
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d309      	bcc.n	8002fd2 <UART_SetConfig+0x332>
 8002fbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fc0:	2380      	movs	r3, #128	@ 0x80
 8002fc2:	035b      	lsls	r3, r3, #13
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d204      	bcs.n	8002fd2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fce:	60da      	str	r2, [r3, #12]
 8002fd0:	e0eb      	b.n	80031aa <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8002fd2:	231a      	movs	r3, #26
 8002fd4:	2218      	movs	r2, #24
 8002fd6:	189b      	adds	r3, r3, r2
 8002fd8:	19db      	adds	r3, r3, r7
 8002fda:	2201      	movs	r2, #1
 8002fdc:	701a      	strb	r2, [r3, #0]
 8002fde:	e0e4      	b.n	80031aa <UART_SetConfig+0x50a>
 8002fe0:	efff69f3 	.word	0xefff69f3
 8002fe4:	ffffcfff 	.word	0xffffcfff
 8002fe8:	40004800 	.word	0x40004800
 8002fec:	fffff4ff 	.word	0xfffff4ff
 8002ff0:	40013800 	.word	0x40013800
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40004400 	.word	0x40004400
 8002ffc:	40004c00 	.word	0x40004c00
 8003000:	40005000 	.word	0x40005000
 8003004:	003d0900 	.word	0x003d0900
 8003008:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	69da      	ldr	r2, [r3, #28]
 8003010:	2380      	movs	r3, #128	@ 0x80
 8003012:	021b      	lsls	r3, r3, #8
 8003014:	429a      	cmp	r2, r3
 8003016:	d000      	beq.n	800301a <UART_SetConfig+0x37a>
 8003018:	e070      	b.n	80030fc <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800301a:	231b      	movs	r3, #27
 800301c:	2218      	movs	r2, #24
 800301e:	189b      	adds	r3, r3, r2
 8003020:	19db      	adds	r3, r3, r7
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b08      	cmp	r3, #8
 8003026:	d822      	bhi.n	800306e <UART_SetConfig+0x3ce>
 8003028:	009a      	lsls	r2, r3, #2
 800302a:	4b67      	ldr	r3, [pc, #412]	@ (80031c8 <UART_SetConfig+0x528>)
 800302c:	18d3      	adds	r3, r2, r3
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003032:	f7ff fb83 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8003036:	0003      	movs	r3, r0
 8003038:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800303a:	e021      	b.n	8003080 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800303c:	f7ff fb94 	bl	8002768 <HAL_RCC_GetPCLK2Freq>
 8003040:	0003      	movs	r3, r0
 8003042:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003044:	e01c      	b.n	8003080 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003046:	4b61      	ldr	r3, [pc, #388]	@ (80031cc <UART_SetConfig+0x52c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2210      	movs	r2, #16
 800304c:	4013      	ands	r3, r2
 800304e:	d002      	beq.n	8003056 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003050:	4b5f      	ldr	r3, [pc, #380]	@ (80031d0 <UART_SetConfig+0x530>)
 8003052:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003054:	e014      	b.n	8003080 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8003056:	4b5f      	ldr	r3, [pc, #380]	@ (80031d4 <UART_SetConfig+0x534>)
 8003058:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800305a:	e011      	b.n	8003080 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800305c:	f7ff fabe 	bl	80025dc <HAL_RCC_GetSysClockFreq>
 8003060:	0003      	movs	r3, r0
 8003062:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003064:	e00c      	b.n	8003080 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003066:	2380      	movs	r3, #128	@ 0x80
 8003068:	021b      	lsls	r3, r3, #8
 800306a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800306c:	e008      	b.n	8003080 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800306e:	2300      	movs	r3, #0
 8003070:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003072:	231a      	movs	r3, #26
 8003074:	2218      	movs	r2, #24
 8003076:	189b      	adds	r3, r3, r2
 8003078:	19db      	adds	r3, r3, r7
 800307a:	2201      	movs	r2, #1
 800307c:	701a      	strb	r2, [r3, #0]
        break;
 800307e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003082:	2b00      	cmp	r3, #0
 8003084:	d100      	bne.n	8003088 <UART_SetConfig+0x3e8>
 8003086:	e090      	b.n	80031aa <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800308a:	005a      	lsls	r2, r3, #1
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	085b      	lsrs	r3, r3, #1
 8003092:	18d2      	adds	r2, r2, r3
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	0019      	movs	r1, r3
 800309a:	0010      	movs	r0, r2
 800309c:	f7fd f834 	bl	8000108 <__udivsi3>
 80030a0:	0003      	movs	r3, r0
 80030a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a6:	2b0f      	cmp	r3, #15
 80030a8:	d921      	bls.n	80030ee <UART_SetConfig+0x44e>
 80030aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030ac:	2380      	movs	r3, #128	@ 0x80
 80030ae:	025b      	lsls	r3, r3, #9
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d21c      	bcs.n	80030ee <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	200e      	movs	r0, #14
 80030ba:	2418      	movs	r4, #24
 80030bc:	1903      	adds	r3, r0, r4
 80030be:	19db      	adds	r3, r3, r7
 80030c0:	210f      	movs	r1, #15
 80030c2:	438a      	bics	r2, r1
 80030c4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c8:	085b      	lsrs	r3, r3, #1
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	2207      	movs	r2, #7
 80030ce:	4013      	ands	r3, r2
 80030d0:	b299      	uxth	r1, r3
 80030d2:	1903      	adds	r3, r0, r4
 80030d4:	19db      	adds	r3, r3, r7
 80030d6:	1902      	adds	r2, r0, r4
 80030d8:	19d2      	adds	r2, r2, r7
 80030da:	8812      	ldrh	r2, [r2, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	1902      	adds	r2, r0, r4
 80030e6:	19d2      	adds	r2, r2, r7
 80030e8:	8812      	ldrh	r2, [r2, #0]
 80030ea:	60da      	str	r2, [r3, #12]
 80030ec:	e05d      	b.n	80031aa <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80030ee:	231a      	movs	r3, #26
 80030f0:	2218      	movs	r2, #24
 80030f2:	189b      	adds	r3, r3, r2
 80030f4:	19db      	adds	r3, r3, r7
 80030f6:	2201      	movs	r2, #1
 80030f8:	701a      	strb	r2, [r3, #0]
 80030fa:	e056      	b.n	80031aa <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030fc:	231b      	movs	r3, #27
 80030fe:	2218      	movs	r2, #24
 8003100:	189b      	adds	r3, r3, r2
 8003102:	19db      	adds	r3, r3, r7
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b08      	cmp	r3, #8
 8003108:	d822      	bhi.n	8003150 <UART_SetConfig+0x4b0>
 800310a:	009a      	lsls	r2, r3, #2
 800310c:	4b32      	ldr	r3, [pc, #200]	@ (80031d8 <UART_SetConfig+0x538>)
 800310e:	18d3      	adds	r3, r2, r3
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003114:	f7ff fb12 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8003118:	0003      	movs	r3, r0
 800311a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800311c:	e021      	b.n	8003162 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800311e:	f7ff fb23 	bl	8002768 <HAL_RCC_GetPCLK2Freq>
 8003122:	0003      	movs	r3, r0
 8003124:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003126:	e01c      	b.n	8003162 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003128:	4b28      	ldr	r3, [pc, #160]	@ (80031cc <UART_SetConfig+0x52c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2210      	movs	r2, #16
 800312e:	4013      	ands	r3, r2
 8003130:	d002      	beq.n	8003138 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003132:	4b27      	ldr	r3, [pc, #156]	@ (80031d0 <UART_SetConfig+0x530>)
 8003134:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003136:	e014      	b.n	8003162 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8003138:	4b26      	ldr	r3, [pc, #152]	@ (80031d4 <UART_SetConfig+0x534>)
 800313a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800313c:	e011      	b.n	8003162 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800313e:	f7ff fa4d 	bl	80025dc <HAL_RCC_GetSysClockFreq>
 8003142:	0003      	movs	r3, r0
 8003144:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003146:	e00c      	b.n	8003162 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003148:	2380      	movs	r3, #128	@ 0x80
 800314a:	021b      	lsls	r3, r3, #8
 800314c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800314e:	e008      	b.n	8003162 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003154:	231a      	movs	r3, #26
 8003156:	2218      	movs	r2, #24
 8003158:	189b      	adds	r3, r3, r2
 800315a:	19db      	adds	r3, r3, r7
 800315c:	2201      	movs	r2, #1
 800315e:	701a      	strb	r2, [r3, #0]
        break;
 8003160:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003164:	2b00      	cmp	r3, #0
 8003166:	d020      	beq.n	80031aa <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	085a      	lsrs	r2, r3, #1
 800316e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003170:	18d2      	adds	r2, r2, r3
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	0019      	movs	r1, r3
 8003178:	0010      	movs	r0, r2
 800317a:	f7fc ffc5 	bl	8000108 <__udivsi3>
 800317e:	0003      	movs	r3, r0
 8003180:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003184:	2b0f      	cmp	r3, #15
 8003186:	d90a      	bls.n	800319e <UART_SetConfig+0x4fe>
 8003188:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800318a:	2380      	movs	r3, #128	@ 0x80
 800318c:	025b      	lsls	r3, r3, #9
 800318e:	429a      	cmp	r2, r3
 8003190:	d205      	bcs.n	800319e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003194:	b29a      	uxth	r2, r3
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	60da      	str	r2, [r3, #12]
 800319c:	e005      	b.n	80031aa <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800319e:	231a      	movs	r3, #26
 80031a0:	2218      	movs	r2, #24
 80031a2:	189b      	adds	r3, r3, r2
 80031a4:	19db      	adds	r3, r3, r7
 80031a6:	2201      	movs	r2, #1
 80031a8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	2200      	movs	r2, #0
 80031ae:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	2200      	movs	r2, #0
 80031b4:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80031b6:	231a      	movs	r3, #26
 80031b8:	2218      	movs	r2, #24
 80031ba:	189b      	adds	r3, r3, r2
 80031bc:	19db      	adds	r3, r3, r7
 80031be:	781b      	ldrb	r3, [r3, #0]
}
 80031c0:	0018      	movs	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	b00e      	add	sp, #56	@ 0x38
 80031c6:	bdb0      	pop	{r4, r5, r7, pc}
 80031c8:	08003748 	.word	0x08003748
 80031cc:	40021000 	.word	0x40021000
 80031d0:	003d0900 	.word	0x003d0900
 80031d4:	00f42400 	.word	0x00f42400
 80031d8:	0800376c 	.word	0x0800376c

080031dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e8:	2201      	movs	r2, #1
 80031ea:	4013      	ands	r3, r2
 80031ec:	d00b      	beq.n	8003206 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	4a4a      	ldr	r2, [pc, #296]	@ (8003320 <UART_AdvFeatureConfig+0x144>)
 80031f6:	4013      	ands	r3, r2
 80031f8:	0019      	movs	r1, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320a:	2202      	movs	r2, #2
 800320c:	4013      	ands	r3, r2
 800320e:	d00b      	beq.n	8003228 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	4a43      	ldr	r2, [pc, #268]	@ (8003324 <UART_AdvFeatureConfig+0x148>)
 8003218:	4013      	ands	r3, r2
 800321a:	0019      	movs	r1, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322c:	2204      	movs	r2, #4
 800322e:	4013      	ands	r3, r2
 8003230:	d00b      	beq.n	800324a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	4a3b      	ldr	r2, [pc, #236]	@ (8003328 <UART_AdvFeatureConfig+0x14c>)
 800323a:	4013      	ands	r3, r2
 800323c:	0019      	movs	r1, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324e:	2208      	movs	r2, #8
 8003250:	4013      	ands	r3, r2
 8003252:	d00b      	beq.n	800326c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	4a34      	ldr	r2, [pc, #208]	@ (800332c <UART_AdvFeatureConfig+0x150>)
 800325c:	4013      	ands	r3, r2
 800325e:	0019      	movs	r1, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003270:	2210      	movs	r2, #16
 8003272:	4013      	ands	r3, r2
 8003274:	d00b      	beq.n	800328e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4a2c      	ldr	r2, [pc, #176]	@ (8003330 <UART_AdvFeatureConfig+0x154>)
 800327e:	4013      	ands	r3, r2
 8003280:	0019      	movs	r1, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003292:	2220      	movs	r2, #32
 8003294:	4013      	ands	r3, r2
 8003296:	d00b      	beq.n	80032b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	4a25      	ldr	r2, [pc, #148]	@ (8003334 <UART_AdvFeatureConfig+0x158>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	0019      	movs	r1, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b4:	2240      	movs	r2, #64	@ 0x40
 80032b6:	4013      	ands	r3, r2
 80032b8:	d01d      	beq.n	80032f6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003338 <UART_AdvFeatureConfig+0x15c>)
 80032c2:	4013      	ands	r3, r2
 80032c4:	0019      	movs	r1, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032d6:	2380      	movs	r3, #128	@ 0x80
 80032d8:	035b      	lsls	r3, r3, #13
 80032da:	429a      	cmp	r2, r3
 80032dc:	d10b      	bne.n	80032f6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	4a15      	ldr	r2, [pc, #84]	@ (800333c <UART_AdvFeatureConfig+0x160>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	0019      	movs	r1, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	4013      	ands	r3, r2
 80032fe:	d00b      	beq.n	8003318 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	4a0e      	ldr	r2, [pc, #56]	@ (8003340 <UART_AdvFeatureConfig+0x164>)
 8003308:	4013      	ands	r3, r2
 800330a:	0019      	movs	r1, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	605a      	str	r2, [r3, #4]
  }
}
 8003318:	46c0      	nop			@ (mov r8, r8)
 800331a:	46bd      	mov	sp, r7
 800331c:	b002      	add	sp, #8
 800331e:	bd80      	pop	{r7, pc}
 8003320:	fffdffff 	.word	0xfffdffff
 8003324:	fffeffff 	.word	0xfffeffff
 8003328:	fffbffff 	.word	0xfffbffff
 800332c:	ffff7fff 	.word	0xffff7fff
 8003330:	ffffefff 	.word	0xffffefff
 8003334:	ffffdfff 	.word	0xffffdfff
 8003338:	ffefffff 	.word	0xffefffff
 800333c:	ff9fffff 	.word	0xff9fffff
 8003340:	fff7ffff 	.word	0xfff7ffff

08003344 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b092      	sub	sp, #72	@ 0x48
 8003348:	af02      	add	r7, sp, #8
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2284      	movs	r2, #132	@ 0x84
 8003350:	2100      	movs	r1, #0
 8003352:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003354:	f7fd fd40 	bl	8000dd8 <HAL_GetTick>
 8003358:	0003      	movs	r3, r0
 800335a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2208      	movs	r2, #8
 8003364:	4013      	ands	r3, r2
 8003366:	2b08      	cmp	r3, #8
 8003368:	d12c      	bne.n	80033c4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800336a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800336c:	2280      	movs	r2, #128	@ 0x80
 800336e:	0391      	lsls	r1, r2, #14
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	4a46      	ldr	r2, [pc, #280]	@ (800348c <UART_CheckIdleState+0x148>)
 8003374:	9200      	str	r2, [sp, #0]
 8003376:	2200      	movs	r2, #0
 8003378:	f000 f88c 	bl	8003494 <UART_WaitOnFlagUntilTimeout>
 800337c:	1e03      	subs	r3, r0, #0
 800337e:	d021      	beq.n	80033c4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003380:	f3ef 8310 	mrs	r3, PRIMASK
 8003384:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003388:	63bb      	str	r3, [r7, #56]	@ 0x38
 800338a:	2301      	movs	r3, #1
 800338c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800338e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003390:	f383 8810 	msr	PRIMASK, r3
}
 8003394:	46c0      	nop			@ (mov r8, r8)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2180      	movs	r1, #128	@ 0x80
 80033a2:	438a      	bics	r2, r1
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ac:	f383 8810 	msr	PRIMASK, r3
}
 80033b0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2220      	movs	r2, #32
 80033b6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2278      	movs	r2, #120	@ 0x78
 80033bc:	2100      	movs	r1, #0
 80033be:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e05f      	b.n	8003484 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2204      	movs	r2, #4
 80033cc:	4013      	ands	r3, r2
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d146      	bne.n	8003460 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033d4:	2280      	movs	r2, #128	@ 0x80
 80033d6:	03d1      	lsls	r1, r2, #15
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	4a2c      	ldr	r2, [pc, #176]	@ (800348c <UART_CheckIdleState+0x148>)
 80033dc:	9200      	str	r2, [sp, #0]
 80033de:	2200      	movs	r2, #0
 80033e0:	f000 f858 	bl	8003494 <UART_WaitOnFlagUntilTimeout>
 80033e4:	1e03      	subs	r3, r0, #0
 80033e6:	d03b      	beq.n	8003460 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033e8:	f3ef 8310 	mrs	r3, PRIMASK
 80033ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80033ee:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80033f2:	2301      	movs	r3, #1
 80033f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f383 8810 	msr	PRIMASK, r3
}
 80033fc:	46c0      	nop			@ (mov r8, r8)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4921      	ldr	r1, [pc, #132]	@ (8003490 <UART_CheckIdleState+0x14c>)
 800340a:	400a      	ands	r2, r1
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003410:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f383 8810 	msr	PRIMASK, r3
}
 8003418:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800341a:	f3ef 8310 	mrs	r3, PRIMASK
 800341e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003420:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003422:	633b      	str	r3, [r7, #48]	@ 0x30
 8003424:	2301      	movs	r3, #1
 8003426:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f383 8810 	msr	PRIMASK, r3
}
 800342e:	46c0      	nop			@ (mov r8, r8)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2101      	movs	r1, #1
 800343c:	438a      	bics	r2, r1
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003442:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	f383 8810 	msr	PRIMASK, r3
}
 800344a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2280      	movs	r2, #128	@ 0x80
 8003450:	2120      	movs	r1, #32
 8003452:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2278      	movs	r2, #120	@ 0x78
 8003458:	2100      	movs	r1, #0
 800345a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e011      	b.n	8003484 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2220      	movs	r2, #32
 8003464:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2280      	movs	r2, #128	@ 0x80
 800346a:	2120      	movs	r1, #32
 800346c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2278      	movs	r2, #120	@ 0x78
 800347e:	2100      	movs	r1, #0
 8003480:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	0018      	movs	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	b010      	add	sp, #64	@ 0x40
 800348a:	bd80      	pop	{r7, pc}
 800348c:	01ffffff 	.word	0x01ffffff
 8003490:	fffffedf 	.word	0xfffffedf

08003494 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	1dfb      	adds	r3, r7, #7
 80034a2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034a4:	e04b      	b.n	800353e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	3301      	adds	r3, #1
 80034aa:	d048      	beq.n	800353e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ac:	f7fd fc94 	bl	8000dd8 <HAL_GetTick>
 80034b0:	0002      	movs	r2, r0
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d302      	bcc.n	80034c2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e04b      	b.n	800355e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2204      	movs	r2, #4
 80034ce:	4013      	ands	r3, r2
 80034d0:	d035      	beq.n	800353e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	2208      	movs	r2, #8
 80034da:	4013      	ands	r3, r2
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d111      	bne.n	8003504 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2208      	movs	r2, #8
 80034e6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	0018      	movs	r0, r3
 80034ec:	f000 f83c 	bl	8003568 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2284      	movs	r2, #132	@ 0x84
 80034f4:	2108      	movs	r1, #8
 80034f6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2278      	movs	r2, #120	@ 0x78
 80034fc:	2100      	movs	r1, #0
 80034fe:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e02c      	b.n	800355e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	69da      	ldr	r2, [r3, #28]
 800350a:	2380      	movs	r3, #128	@ 0x80
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	401a      	ands	r2, r3
 8003510:	2380      	movs	r3, #128	@ 0x80
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	429a      	cmp	r2, r3
 8003516:	d112      	bne.n	800353e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2280      	movs	r2, #128	@ 0x80
 800351e:	0112      	lsls	r2, r2, #4
 8003520:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	0018      	movs	r0, r3
 8003526:	f000 f81f 	bl	8003568 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2284      	movs	r2, #132	@ 0x84
 800352e:	2120      	movs	r1, #32
 8003530:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2278      	movs	r2, #120	@ 0x78
 8003536:	2100      	movs	r1, #0
 8003538:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e00f      	b.n	800355e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	4013      	ands	r3, r2
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	425a      	negs	r2, r3
 800354e:	4153      	adcs	r3, r2
 8003550:	b2db      	uxtb	r3, r3
 8003552:	001a      	movs	r2, r3
 8003554:	1dfb      	adds	r3, r7, #7
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	429a      	cmp	r2, r3
 800355a:	d0a4      	beq.n	80034a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	0018      	movs	r0, r3
 8003560:	46bd      	mov	sp, r7
 8003562:	b004      	add	sp, #16
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08e      	sub	sp, #56	@ 0x38
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003570:	f3ef 8310 	mrs	r3, PRIMASK
 8003574:	617b      	str	r3, [r7, #20]
  return(result);
 8003576:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003578:	637b      	str	r3, [r7, #52]	@ 0x34
 800357a:	2301      	movs	r3, #1
 800357c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	f383 8810 	msr	PRIMASK, r3
}
 8003584:	46c0      	nop			@ (mov r8, r8)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4926      	ldr	r1, [pc, #152]	@ (800362c <UART_EndRxTransfer+0xc4>)
 8003592:	400a      	ands	r2, r1
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003598:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	f383 8810 	msr	PRIMASK, r3
}
 80035a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035a2:	f3ef 8310 	mrs	r3, PRIMASK
 80035a6:	623b      	str	r3, [r7, #32]
  return(result);
 80035a8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80035ac:	2301      	movs	r3, #1
 80035ae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b2:	f383 8810 	msr	PRIMASK, r3
}
 80035b6:	46c0      	nop			@ (mov r8, r8)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2101      	movs	r1, #1
 80035c4:	438a      	bics	r2, r1
 80035c6:	609a      	str	r2, [r3, #8]
 80035c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ce:	f383 8810 	msr	PRIMASK, r3
}
 80035d2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d118      	bne.n	800360e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035dc:	f3ef 8310 	mrs	r3, PRIMASK
 80035e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80035e2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035e6:	2301      	movs	r3, #1
 80035e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f383 8810 	msr	PRIMASK, r3
}
 80035f0:	46c0      	nop			@ (mov r8, r8)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2110      	movs	r1, #16
 80035fe:	438a      	bics	r2, r1
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003604:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f383 8810 	msr	PRIMASK, r3
}
 800360c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2280      	movs	r2, #128	@ 0x80
 8003612:	2120      	movs	r1, #32
 8003614:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003622:	46c0      	nop			@ (mov r8, r8)
 8003624:	46bd      	mov	sp, r7
 8003626:	b00e      	add	sp, #56	@ 0x38
 8003628:	bd80      	pop	{r7, pc}
 800362a:	46c0      	nop			@ (mov r8, r8)
 800362c:	fffffedf 	.word	0xfffffedf

08003630 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003638:	4b09      	ldr	r3, [pc, #36]	@ (8003660 <USB_DisableGlobalInt+0x30>)
 800363a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2240      	movs	r2, #64	@ 0x40
 8003640:	5a9b      	ldrh	r3, [r3, r2]
 8003642:	b29b      	uxth	r3, r3
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	b292      	uxth	r2, r2
 8003648:	43d2      	mvns	r2, r2
 800364a:	b292      	uxth	r2, r2
 800364c:	4013      	ands	r3, r2
 800364e:	b299      	uxth	r1, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2240      	movs	r2, #64	@ 0x40
 8003654:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	0018      	movs	r0, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	b004      	add	sp, #16
 800365e:	bd80      	pop	{r7, pc}
 8003660:	0000bf80 	.word	0x0000bf80

08003664 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003664:	b084      	sub	sp, #16
 8003666:	b590      	push	{r4, r7, lr}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
 800366e:	2004      	movs	r0, #4
 8003670:	2410      	movs	r4, #16
 8003672:	1900      	adds	r0, r0, r4
 8003674:	2408      	movs	r4, #8
 8003676:	46a4      	mov	ip, r4
 8003678:	44bc      	add	ip, r7
 800367a:	4460      	add	r0, ip
 800367c:	6001      	str	r1, [r0, #0]
 800367e:	6042      	str	r2, [r0, #4]
 8003680:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2240      	movs	r2, #64	@ 0x40
 8003686:	2101      	movs	r1, #1
 8003688:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2240      	movs	r2, #64	@ 0x40
 800368e:	2100      	movs	r1, #0
 8003690:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2244      	movs	r2, #68	@ 0x44
 8003696:	2100      	movs	r1, #0
 8003698:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2250      	movs	r2, #80	@ 0x50
 800369e:	2100      	movs	r1, #0
 80036a0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	0018      	movs	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	b003      	add	sp, #12
 80036aa:	bc90      	pop	{r4, r7}
 80036ac:	bc08      	pop	{r3}
 80036ae:	b004      	add	sp, #16
 80036b0:	4718      	bx	r3

080036b2 <memset>:
 80036b2:	0003      	movs	r3, r0
 80036b4:	1882      	adds	r2, r0, r2
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d100      	bne.n	80036bc <memset+0xa>
 80036ba:	4770      	bx	lr
 80036bc:	7019      	strb	r1, [r3, #0]
 80036be:	3301      	adds	r3, #1
 80036c0:	e7f9      	b.n	80036b6 <memset+0x4>
	...

080036c4 <__libc_init_array>:
 80036c4:	b570      	push	{r4, r5, r6, lr}
 80036c6:	2600      	movs	r6, #0
 80036c8:	4c0c      	ldr	r4, [pc, #48]	@ (80036fc <__libc_init_array+0x38>)
 80036ca:	4d0d      	ldr	r5, [pc, #52]	@ (8003700 <__libc_init_array+0x3c>)
 80036cc:	1b64      	subs	r4, r4, r5
 80036ce:	10a4      	asrs	r4, r4, #2
 80036d0:	42a6      	cmp	r6, r4
 80036d2:	d109      	bne.n	80036e8 <__libc_init_array+0x24>
 80036d4:	2600      	movs	r6, #0
 80036d6:	f000 f819 	bl	800370c <_init>
 80036da:	4c0a      	ldr	r4, [pc, #40]	@ (8003704 <__libc_init_array+0x40>)
 80036dc:	4d0a      	ldr	r5, [pc, #40]	@ (8003708 <__libc_init_array+0x44>)
 80036de:	1b64      	subs	r4, r4, r5
 80036e0:	10a4      	asrs	r4, r4, #2
 80036e2:	42a6      	cmp	r6, r4
 80036e4:	d105      	bne.n	80036f2 <__libc_init_array+0x2e>
 80036e6:	bd70      	pop	{r4, r5, r6, pc}
 80036e8:	00b3      	lsls	r3, r6, #2
 80036ea:	58eb      	ldr	r3, [r5, r3]
 80036ec:	4798      	blx	r3
 80036ee:	3601      	adds	r6, #1
 80036f0:	e7ee      	b.n	80036d0 <__libc_init_array+0xc>
 80036f2:	00b3      	lsls	r3, r6, #2
 80036f4:	58eb      	ldr	r3, [r5, r3]
 80036f6:	4798      	blx	r3
 80036f8:	3601      	adds	r6, #1
 80036fa:	e7f2      	b.n	80036e2 <__libc_init_array+0x1e>
 80036fc:	08003798 	.word	0x08003798
 8003700:	08003798 	.word	0x08003798
 8003704:	0800379c 	.word	0x0800379c
 8003708:	08003798 	.word	0x08003798

0800370c <_init>:
 800370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370e:	46c0      	nop			@ (mov r8, r8)
 8003710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003712:	bc08      	pop	{r3}
 8003714:	469e      	mov	lr, r3
 8003716:	4770      	bx	lr

08003718 <_fini>:
 8003718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371a:	46c0      	nop			@ (mov r8, r8)
 800371c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800371e:	bc08      	pop	{r3}
 8003720:	469e      	mov	lr, r3
 8003722:	4770      	bx	lr
